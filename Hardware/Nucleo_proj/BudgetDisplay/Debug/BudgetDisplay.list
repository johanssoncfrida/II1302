
BudgetDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006670  08006670  00016670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066c8  080066c8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080066c8  080066c8  000166c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066d0  080066d0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066d0  080066d0  000166d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066d4  080066d4  000166d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080066d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000060  08006738  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08006738  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bdbb  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032b1  00000000  00000000  0003be4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  0003f100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001488  00000000  00000000  000406f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aca3  00000000  00000000  00041b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d68  00000000  00000000  0006c81b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e5f2  00000000  00000000  00086583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00194b75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c94  00000000  00000000  00194bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006658 	.word	0x08006658

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08006658 	.word	0x08006658

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004c6:	f107 031c 	add.w	r3, r7, #28
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
 80004e0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80004e2:	4b30      	ldr	r3, [pc, #192]	; (80005a4 <MX_ADC1_Init+0xe4>)
 80004e4:	4a30      	ldr	r2, [pc, #192]	; (80005a8 <MX_ADC1_Init+0xe8>)
 80004e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80004e8:	4b2e      	ldr	r3, [pc, #184]	; (80005a4 <MX_ADC1_Init+0xe4>)
 80004ea:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80004ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80004f0:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <MX_ADC1_Init+0xe4>)
 80004f2:	2210      	movs	r2, #16
 80004f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f6:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <MX_ADC1_Init+0xe4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004fc:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <MX_ADC1_Init+0xe4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000502:	4b28      	ldr	r3, [pc, #160]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000504:	2204      	movs	r2, #4
 8000506:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000508:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <MX_ADC1_Init+0xe4>)
 800050a:	2200      	movs	r2, #0
 800050c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800050e:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000510:	2201      	movs	r2, #1
 8000512:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000514:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000516:	2201      	movs	r2, #1
 8000518:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800051a:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <MX_ADC1_Init+0xe4>)
 800051c:	2200      	movs	r2, #0
 800051e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000524:	2200      	movs	r2, #0
 8000526:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000528:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <MX_ADC1_Init+0xe4>)
 800052a:	2200      	movs	r2, #0
 800052c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000530:	2200      	movs	r2, #0
 8000532:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000536:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000538:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800053c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800053e:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000540:	2200      	movs	r2, #0
 8000542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000546:	4817      	ldr	r0, [pc, #92]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000548:	f001 f84a 	bl	80015e0 <HAL_ADC_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000552:	f000 fd63 	bl	800101c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000556:	2300      	movs	r3, #0
 8000558:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	4619      	mov	r1, r3
 8000560:	4810      	ldr	r0, [pc, #64]	; (80005a4 <MX_ADC1_Init+0xe4>)
 8000562:	f001 fed3 	bl	800230c <HAL_ADCEx_MultiModeConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800056c:	f000 fd56 	bl	800101c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <MX_ADC1_Init+0xec>)
 8000572:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000574:	2306      	movs	r3, #6
 8000576:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800057c:	237f      	movs	r3, #127	; 0x7f
 800057e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000580:	2304      	movs	r3, #4
 8000582:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	4619      	mov	r1, r3
 800058c:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_ADC1_Init+0xe4>)
 800058e:	f001 fa45 	bl	8001a1c <HAL_ADC_ConfigChannel>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000598:	f000 fd40 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800059c:	bf00      	nop
 800059e:	3728      	adds	r7, #40	; 0x28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000007c 	.word	0x2000007c
 80005a8:	50040000 	.word	0x50040000
 80005ac:	43210000 	.word	0x43210000

080005b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a15      	ldr	r2, [pc, #84]	; (8000624 <HAL_ADC_MspInit+0x74>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d123      	bne.n	800061a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <HAL_ADC_MspInit+0x78>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a14      	ldr	r2, [pc, #80]	; (8000628 <HAL_ADC_MspInit+0x78>)
 80005d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_ADC_MspInit+0x78>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_ADC_MspInit+0x78>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <HAL_ADC_MspInit+0x78>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <HAL_ADC_MspInit+0x78>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000602:	2302      	movs	r3, #2
 8000604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000606:	230b      	movs	r3, #11
 8000608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <HAL_ADC_MspInit+0x7c>)
 8000616:	f002 f80b 	bl	8002630 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	; 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	50040000 	.word	0x50040000
 8000628:	40021000 	.word	0x40021000
 800062c:	48000400 	.word	0x48000400

08000630 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b41      	ldr	r3, [pc, #260]	; (800074c <MX_GPIO_Init+0x11c>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a40      	ldr	r2, [pc, #256]	; (800074c <MX_GPIO_Init+0x11c>)
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b3e      	ldr	r3, [pc, #248]	; (800074c <MX_GPIO_Init+0x11c>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0304 	and.w	r3, r3, #4
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b3b      	ldr	r3, [pc, #236]	; (800074c <MX_GPIO_Init+0x11c>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	4a3a      	ldr	r2, [pc, #232]	; (800074c <MX_GPIO_Init+0x11c>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066a:	4b38      	ldr	r3, [pc, #224]	; (800074c <MX_GPIO_Init+0x11c>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b35      	ldr	r3, [pc, #212]	; (800074c <MX_GPIO_Init+0x11c>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	4a34      	ldr	r2, [pc, #208]	; (800074c <MX_GPIO_Init+0x11c>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000682:	4b32      	ldr	r3, [pc, #200]	; (800074c <MX_GPIO_Init+0x11c>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	4b2f      	ldr	r3, [pc, #188]	; (800074c <MX_GPIO_Init+0x11c>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a2e      	ldr	r2, [pc, #184]	; (800074c <MX_GPIO_Init+0x11c>)
 8000694:	f043 0308 	orr.w	r3, r3, #8
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b2c      	ldr	r3, [pc, #176]	; (800074c <MX_GPIO_Init+0x11c>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0308 	and.w	r3, r3, #8
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_CS_GPIO_Port, Disp_CS_Pin, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ac:	4828      	ldr	r0, [pc, #160]	; (8000750 <MX_GPIO_Init+0x120>)
 80006ae:	f002 f969 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006bc:	f002 f962 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Disp_Green_Pin|Disp_White_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80006c6:	4823      	ldr	r0, [pc, #140]	; (8000754 <MX_GPIO_Init+0x124>)
 80006c8:	f002 f95c 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_Mod_Pin;
 80006cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d2:	2303      	movs	r3, #3
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWM_Mod_GPIO_Port, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	481c      	ldr	r0, [pc, #112]	; (8000754 <MX_GPIO_Init+0x124>)
 80006e2:	f001 ffa5 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Disp_CS_Pin;
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Disp_CS_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	4814      	ldr	r0, [pc, #80]	; (8000750 <MX_GPIO_Init+0x120>)
 8000700:	f001 ff96 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Disp_Reset_Pin;
 8000704:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2300      	movs	r3, #0
 8000714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Disp_Reset_GPIO_Port, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000720:	f001 ff86 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Disp_Green_Pin|Disp_White_Pin;
 8000724:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800072e:	2302      	movs	r3, #2
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_GPIO_Init+0x124>)
 800073e:	f001 ff77 	bl	8002630 <HAL_GPIO_Init>

}
 8000742:	bf00      	nop
 8000744:	3728      	adds	r7, #40	; 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000
 8000750:	48000400 	.word	0x48000400
 8000754:	48000800 	.word	0x48000800

08000758 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800075c:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_RTC_Init+0x48>)
 800075e:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <MX_RTC_Init+0x4c>)
 8000760:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_RTC_Init+0x48>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <MX_RTC_Init+0x48>)
 800076a:	227f      	movs	r2, #127	; 0x7f
 800076c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_RTC_Init+0x48>)
 8000770:	22ff      	movs	r2, #255	; 0xff
 8000772:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_RTC_Init+0x48>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_RTC_Init+0x48>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <MX_RTC_Init+0x48>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_RTC_Init+0x48>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_RTC_Init+0x48>)
 800078e:	f003 fc4f 	bl	8004030 <HAL_RTC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000798:	f000 fc40 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200000e0 	.word	0x200000e0
 80007a4:	40002800 	.word	0x40002800

080007a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_RTC_MspInit+0x30>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d107      	bne.n	80007ca <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <HAL_RTC_MspInit+0x34>)
 80007bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007c0:	4a06      	ldr	r2, [pc, #24]	; (80007dc <HAL_RTC_MspInit+0x34>)
 80007c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40002800 	.word	0x40002800
 80007dc:	40021000 	.word	0x40021000

080007e0 <screentrans>:
@param dat is the command to be sent

@return void
*/

void screentrans(uint8_t start, uint8_t dat){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	460a      	mov	r2, r1
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	4613      	mov	r3, r2
 80007ee:	71bb      	strb	r3, [r7, #6]

	data[0] = start;
 80007f0:	4a14      	ldr	r2, [pc, #80]	; (8000844 <screentrans+0x64>)
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	7013      	strb	r3, [r2, #0]
	data[1] = dat & 0xF;
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	f003 030f 	and.w	r3, r3, #15
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <screentrans+0x64>)
 8000800:	705a      	strb	r2, [r3, #1]
	data[2] = dat >> 4;
 8000802:	79bb      	ldrb	r3, [r7, #6]
 8000804:	091b      	lsrs	r3, r3, #4
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <screentrans+0x64>)
 800080a:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(Disp_CS_GPIO_Port, Disp_CS_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <screentrans+0x68>)
 8000814:	f002 f8b6 	bl	8002984 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000818:	200a      	movs	r0, #10
 800081a:	f000 fcfb 	bl	8001214 <HAL_Delay>

	HAL_SPI_Transmit(&hspi2, data, 3, 10);
 800081e:	230a      	movs	r3, #10
 8000820:	2203      	movs	r2, #3
 8000822:	4908      	ldr	r1, [pc, #32]	; (8000844 <screentrans+0x64>)
 8000824:	4809      	ldr	r0, [pc, #36]	; (800084c <screentrans+0x6c>)
 8000826:	f003 fdb8 	bl	800439a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(Disp_CS_GPIO_Port, Disp_CS_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <screentrans+0x68>)
 8000832:	f002 f8a7 	bl	8002984 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000836:	200a      	movs	r0, #10
 8000838:	f000 fcec 	bl	8001214 <HAL_Delay>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000104 	.word	0x20000104
 8000848:	48000400 	.word	0x48000400
 800084c:	20000108 	.word	0x20000108

08000850 <screenclear>:
@param none

@return void
*/

void screenclear(void){
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	screentrans(SYNC, 0x01); // clear command
 8000854:	2101      	movs	r1, #1
 8000856:	201f      	movs	r0, #31
 8000858:	f7ff ffc2 	bl	80007e0 <screentrans>
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}

08000860 <screeninit>:
@param none

@return void
*/

void screeninit(void){
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b087      	sub	sp, #28
 8000864:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f002 f888 	bl	8002984 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000874:	2001      	movs	r0, #1
 8000876:	f000 fccd 	bl	8001214 <HAL_Delay>
	HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000884:	f002 f87e 	bl	8002984 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000888:	2001      	movs	r0, #1
 800088a:	f000 fcc3 	bl	8001214 <HAL_Delay>

	int i;
	uint8_t in[] = {0x3A, 0x09, 0x06, 0x1E, 0x39, 0x1B, 0x6E, 0x56, 0x7F, 0x3A, 0x1F, 0x31, 0x38, 0x0F/*0x0C, 0x01*/}; // goes over init example from data-sheet
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <screeninit+0x64>)
 8000890:	1d3c      	adds	r4, r7, #4
 8000892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000894:	c407      	stmia	r4!, {r0, r1, r2}
 8000896:	8023      	strh	r3, [r4, #0]

	for(i = 0; i < sizeof(in); i++){
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	e00a      	b.n	80008b4 <screeninit+0x54>
		screentrans(SYNC, in[i]);
 800089e:	1d3a      	adds	r2, r7, #4
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	4413      	add	r3, r2
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	4619      	mov	r1, r3
 80008a8:	201f      	movs	r0, #31
 80008aa:	f7ff ff99 	bl	80007e0 <screentrans>
	for(i = 0; i < sizeof(in); i++){
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	3301      	adds	r3, #1
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	2b0d      	cmp	r3, #13
 80008b8:	d9f1      	bls.n	800089e <screeninit+0x3e>
	}
}
 80008ba:	bf00      	nop
 80008bc:	bf00      	nop
 80008be:	371c      	adds	r7, #28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd90      	pop	{r4, r7, pc}
 80008c4:	08006670 	.word	0x08006670

080008c8 <screenupdate>:
@param none

@return void
*/

void screenupdate(void){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
	int i,j;
	screenclear();
 80008ce:	f7ff ffbf 	bl	8000850 <screenclear>
	for(i = 0; i < 4; i++){
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	e030      	b.n	800093a <screenupdate+0x72>
		screentrans(SYNC, 0x80 + i*0x20);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3304      	adds	r3, #4
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	015b      	lsls	r3, r3, #5
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	4619      	mov	r1, r3
 80008e4:	201f      	movs	r0, #31
 80008e6:	f7ff ff7b 	bl	80007e0 <screentrans>
		for(j = 0; j < 21 && str[i][j] != 0; j++){
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	e011      	b.n	8000914 <screenupdate+0x4c>
			screentrans(RS, (uint8_t) str[i][j]);
 80008f0:	4916      	ldr	r1, [pc, #88]	; (800094c <screenupdate+0x84>)
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	4613      	mov	r3, r2
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	4413      	add	r3, r2
 80008fa:	00da      	lsls	r2, r3, #3
 80008fc:	1ad2      	subs	r2, r2, r3
 80008fe:	440a      	add	r2, r1
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	4413      	add	r3, r2
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	4619      	mov	r1, r3
 8000908:	205f      	movs	r0, #95	; 0x5f
 800090a:	f7ff ff69 	bl	80007e0 <screentrans>
		for(j = 0; j < 21 && str[i][j] != 0; j++){
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	2b14      	cmp	r3, #20
 8000918:	dc0c      	bgt.n	8000934 <screenupdate+0x6c>
 800091a:	490c      	ldr	r1, [pc, #48]	; (800094c <screenupdate+0x84>)
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	4613      	mov	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	00da      	lsls	r2, r3, #3
 8000926:	1ad2      	subs	r2, r2, r3
 8000928:	440a      	add	r2, r1
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	4413      	add	r3, r2
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1dd      	bne.n	80008f0 <screenupdate+0x28>
	for(i = 0; i < 4; i++){
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3301      	adds	r3, #1
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b03      	cmp	r3, #3
 800093e:	ddcb      	ble.n	80008d8 <screenupdate+0x10>
		}
	}
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000000 	.word	0x20000000

08000950 <screenshift>:
@param none

@return void
*/

void screenshift(void){
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	while(1){
		screentrans(SYNC, 0x18);
 8000954:	2118      	movs	r1, #24
 8000956:	201f      	movs	r0, #31
 8000958:	f7ff ff42 	bl	80007e0 <screentrans>
		HAL_Delay(500);
 800095c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000960:	f000 fc58 	bl	8001214 <HAL_Delay>
		screentrans(SYNC, 0x18);
 8000964:	e7f6      	b.n	8000954 <screenshift+0x4>
	...

08000968 <pwmod>:
@param uint8_t mod, the value to set the cycle to, should be between 0 and 255

@return void
*/

void pwmod(uint8_t mod){
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, mod);
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <pwmod+0x20>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	79fa      	ldrb	r2, [r7, #7]
 8000978:	639a      	str	r2, [r3, #56]	; 0x38
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	200001b8 	.word	0x200001b8

0800098c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000990:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <MX_SPI2_Init+0x74>)
 8000992:	4a1c      	ldr	r2, [pc, #112]	; (8000a04 <MX_SPI2_Init+0x78>)
 8000994:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000996:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <MX_SPI2_Init+0x74>)
 8000998:	f44f 7282 	mov.w	r2, #260	; 0x104
 800099c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <MX_SPI2_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <MX_SPI2_Init+0x74>)
 80009a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_SPI2_Init+0x74>)
 80009ae:	2202      	movs	r2, #2
 80009b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_SPI2_Init+0x74>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_SPI2_Init+0x74>)
 80009ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_SPI2_Init+0x74>)
 80009c2:	2230      	movs	r2, #48	; 0x30
 80009c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_SPI2_Init+0x74>)
 80009c8:	2280      	movs	r2, #128	; 0x80
 80009ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_SPI2_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_SPI2_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_SPI2_Init+0x74>)
 80009da:	2207      	movs	r2, #7
 80009dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_SPI2_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_SPI2_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_SPI2_Init+0x74>)
 80009ec:	f003 fc32 	bl	8004254 <HAL_SPI_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80009f6:	f000 fb11 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000108 	.word	0x20000108
 8000a04:	40003800 	.word	0x40003800

08000a08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a25      	ldr	r2, [pc, #148]	; (8000abc <HAL_SPI_MspInit+0xb4>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d144      	bne.n	8000ab4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a2a:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <HAL_SPI_MspInit+0xb8>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	4a24      	ldr	r2, [pc, #144]	; (8000ac0 <HAL_SPI_MspInit+0xb8>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6593      	str	r3, [r2, #88]	; 0x58
 8000a36:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <HAL_SPI_MspInit+0xb8>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <HAL_SPI_MspInit+0xb8>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a1e      	ldr	r2, [pc, #120]	; (8000ac0 <HAL_SPI_MspInit+0xb8>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_SPI_MspInit+0xb8>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_SPI_MspInit+0xb8>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <HAL_SPI_MspInit+0xb8>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <HAL_SPI_MspInit+0xb8>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a72:	230c      	movs	r3, #12
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a82:	2305      	movs	r3, #5
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <HAL_SPI_MspInit+0xbc>)
 8000a8e:	f001 fdcf 	bl	8002630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aa4:	2305      	movs	r3, #5
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <HAL_SPI_MspInit+0xc0>)
 8000ab0:	f001 fdbe 	bl	8002630 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40003800 	.word	0x40003800
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	48000800 	.word	0x48000800
 8000ac8:	48000400 	.word	0x48000400

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_MspInit+0x44>)
 8000ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <HAL_MspInit+0x44>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_MspInit+0x44>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_MspInit+0x44>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_MspInit+0x44>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6593      	str	r3, [r2, #88]	; 0x58
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_MspInit+0x44>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40021000 	.word	0x40021000

08000b14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	2019      	movs	r0, #25
 8000b2a:	f001 fd57 	bl	80025dc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b2e:	2019      	movs	r0, #25
 8000b30:	f001 fd70 	bl	8002614 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b34:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <HAL_InitTick+0x9c>)
 8000b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b38:	4a1d      	ldr	r2, [pc, #116]	; (8000bb0 <HAL_InitTick+0x9c>)
 8000b3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b3e:	6613      	str	r3, [r2, #96]	; 0x60
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <HAL_InitTick+0x9c>)
 8000b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b4c:	f107 0210 	add.w	r2, r7, #16
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 fd1c 	bl	8003594 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b5c:	f002 fd04 	bl	8003568 <HAL_RCC_GetPCLK2Freq>
 8000b60:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <HAL_InitTick+0xa0>)
 8000b66:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6a:	0c9b      	lsrs	r3, r3, #18
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <HAL_InitTick+0xa8>)
 8000b74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b82:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b92:	f003 fed1 	bl	8004938 <HAL_TIM_Base_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d104      	bne.n	8000ba6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b9c:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b9e:	f003 ff23 	bl	80049e8 <HAL_TIM_Base_Start_IT>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3730      	adds	r7, #48	; 0x30
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	431bde83 	.word	0x431bde83
 8000bb8:	2000016c 	.word	0x2000016c
 8000bbc:	40012c00 	.word	0x40012c00

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c26:	f004 f8b7 	bl	8004d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000016c 	.word	0x2000016c

08000c34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <SystemInit+0x64>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a16      	ldr	r2, [pc, #88]	; (8000c98 <SystemInit+0x64>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <SystemInit+0x68>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <SystemInit+0x68>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <SystemInit+0x68>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <SystemInit+0x68>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <SystemInit+0x68>)
 8000c60:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c64:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <SystemInit+0x68>)
 8000c6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c70:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <SystemInit+0x68>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <SystemInit+0x68>)
 8000c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c7c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <SystemInit+0x68>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <SystemInit+0x64>)
 8000c86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08e      	sub	sp, #56	; 0x38
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
 8000cce:	615a      	str	r2, [r3, #20]
 8000cd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000cd4:	4a2c      	ldr	r2, [pc, #176]	; (8000d88 <MX_TIM3_Init+0xe8>)
 8000cd6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 255;
 8000cd8:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000cda:	22ff      	movs	r2, #255	; 0xff
 8000cdc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cde:	4b29      	ldr	r3, [pc, #164]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000ce4:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000ce6:	22ff      	movs	r2, #255	; 0xff
 8000ce8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cea:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf0:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cf6:	4823      	ldr	r0, [pc, #140]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000cf8:	f003 fe1e 	bl	8004938 <HAL_TIM_Base_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d02:	f000 f98b 	bl	800101c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d10:	4619      	mov	r1, r3
 8000d12:	481c      	ldr	r0, [pc, #112]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000d14:	f004 fa70 	bl	80051f8 <HAL_TIM_ConfigClockSource>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d1e:	f000 f97d 	bl	800101c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d22:	4818      	ldr	r0, [pc, #96]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000d24:	f003 fed0 	bl	8004ac8 <HAL_TIM_PWM_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d2e:	f000 f975 	bl	800101c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4810      	ldr	r0, [pc, #64]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000d42:	f004 ff77 	bl	8005c34 <HAL_TIMEx_MasterConfigSynchronization>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d4c:	f000 f966 	bl	800101c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d50:	2360      	movs	r3, #96	; 0x60
 8000d52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 255;
 8000d54:	23ff      	movs	r3, #255	; 0xff
 8000d56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d60:	463b      	mov	r3, r7
 8000d62:	2204      	movs	r2, #4
 8000d64:	4619      	mov	r1, r3
 8000d66:	4807      	ldr	r0, [pc, #28]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000d68:	f004 f936 	bl	8004fd8 <HAL_TIM_PWM_ConfigChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d72:	f000 f953 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d76:	4803      	ldr	r0, [pc, #12]	; (8000d84 <MX_TIM3_Init+0xe4>)
 8000d78:	f000 f828 	bl	8000dcc <HAL_TIM_MspPostInit>

}
 8000d7c:	bf00      	nop
 8000d7e:	3738      	adds	r7, #56	; 0x38
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200001b8 	.word	0x200001b8
 8000d88:	40000400 	.word	0x40000400

08000d8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_TIM_Base_MspInit+0x38>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d10b      	bne.n	8000db6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da2:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6593      	str	r3, [r2, #88]	; 0x58
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40000400 	.word	0x40000400
 8000dc8:	40021000 	.word	0x40021000

08000dcc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <HAL_TIM_MspPostInit+0x64>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d11b      	bne.n	8000e26 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_TIM_MspPostInit+0x68>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <HAL_TIM_MspPostInit+0x68>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_TIM_MspPostInit+0x68>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <HAL_TIM_MspPostInit+0x6c>)
 8000e22:	f001 fc05 	bl	8002630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3720      	adds	r7, #32
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40000400 	.word	0x40000400
 8000e34:	40021000 	.word	0x40021000
 8000e38:	48000800 	.word	0x48000800

08000e3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e40:	f000 f9af 	bl	80011a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e44:	f000 f848 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e48:	f7ff fbf2 	bl	8000630 <MX_GPIO_Init>
  MX_RTC_Init();
 8000e4c:	f7ff fc84 	bl	8000758 <MX_RTC_Init>
  MX_SPI2_Init();
 8000e50:	f7ff fd9c 	bl	800098c <MX_SPI2_Init>
  MX_TIM3_Init();
 8000e54:	f7ff ff24 	bl	8000ca0 <MX_TIM3_Init>
  MX_UART5_Init();
 8000e58:	f000 f8e8 	bl	800102c <MX_UART5_Init>
  MX_ADC1_Init();
 8000e5c:	f7ff fb30 	bl	80004c0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // start PWM
 8000e60:	2104      	movs	r1, #4
 8000e62:	481a      	ldr	r0, [pc, #104]	; (8000ecc <main+0x90>)
 8000e64:	f003 fe92 	bl	8004b8c <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc1);
 8000e68:	4819      	ldr	r0, [pc, #100]	; (8000ed0 <main+0x94>)
 8000e6a:	f000 fd0f 	bl	800188c <HAL_ADC_Start>

  HAL_Delay(500);	// pwmmod test
 8000e6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e72:	f000 f9cf 	bl	8001214 <HAL_Delay>
  pwmod(128);
 8000e76:	2080      	movs	r0, #128	; 0x80
 8000e78:	f7ff fd76 	bl	8000968 <pwmod>
  HAL_Delay(500);
 8000e7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e80:	f000 f9c8 	bl	8001214 <HAL_Delay>
  pwmod(64);
 8000e84:	2040      	movs	r0, #64	; 0x40
 8000e86:	f7ff fd6f 	bl	8000968 <pwmod>
  HAL_Delay(500);
 8000e8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e8e:	f000 f9c1 	bl	8001214 <HAL_Delay>

  screeninit();		// screenbuffer/init test (linked functionality)
 8000e92:	f7ff fce5 	bl	8000860 <screeninit>
  screenupdate();	// screenbuffer should show "T 13:45:21"
 8000e96:	f7ff fd17 	bl	80008c8 <screenupdate>
  HAL_Delay(1000);
 8000e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e9e:	f000 f9b9 	bl	8001214 <HAL_Delay>
  screenshift();
 8000ea2:	f7ff fd55 	bl	8000950 <screenshift>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  adw = HAL_ADC_GetValue(&hadc1);
 8000ea6:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <main+0x94>)
 8000ea8:	f000 fdaa 	bl	8001a00 <HAL_ADC_GetValue>
 8000eac:	4603      	mov	r3, r0
 8000eae:	4a09      	ldr	r2, [pc, #36]	; (8000ed4 <main+0x98>)
 8000eb0:	6013      	str	r3, [r2, #0]
	  pwmod(adw & 0xFF); // modify pwm based on adc
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <main+0x98>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fd55 	bl	8000968 <pwmod>

	  screenupdate();
 8000ebe:	f7ff fd03 	bl	80008c8 <screenupdate>
	  HAL_Delay(10000);
 8000ec2:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ec6:	f000 f9a5 	bl	8001214 <HAL_Delay>
	  adw = HAL_ADC_GetValue(&hadc1);
 8000eca:	e7ec      	b.n	8000ea6 <main+0x6a>
 8000ecc:	200001b8 	.word	0x200001b8
 8000ed0:	2000007c 	.word	0x2000007c
 8000ed4:	20000204 	.word	0x20000204

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b0b8      	sub	sp, #224	; 0xe0
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ee2:	2244      	movs	r2, #68	; 0x44
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f005 fbae 	bl	8006648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000efc:	463b      	mov	r3, r7
 8000efe:	2288      	movs	r2, #136	; 0x88
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f005 fba0 	bl	8006648 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000f08:	230a      	movs	r3, #10
 8000f0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f16:	2310      	movs	r3, #16
 8000f18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f22:	2302      	movs	r3, #2
 8000f24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f34:	230a      	movs	r3, #10
 8000f36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f40:	2302      	movs	r3, #2
 8000f42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f50:	4618      	mov	r0, r3
 8000f52:	f001 fd93 	bl	8002a7c <HAL_RCC_OscConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000f5c:	f000 f85e 	bl	800101c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f60:	230f      	movs	r3, #15
 8000f62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f66:	2303      	movs	r3, #3
 8000f68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f7e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f82:	2104      	movs	r1, #4
 8000f84:	4618      	mov	r0, r3
 8000f86:	f002 f95f 	bl	8003248 <HAL_RCC_ClockConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000f90:	f000 f844 	bl	800101c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART5
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <SystemClock_Config+0x11c>)
 8000f96:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fa0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000faa:	2302      	movs	r3, #2
 8000fac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000fb2:	2308      	movs	r3, #8
 8000fb4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fb6:	2307      	movs	r3, #7
 8000fb8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fc6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 fb74 	bl	80036b8 <HAL_RCCEx_PeriphCLKConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x102>
  {
    Error_Handler();
 8000fd6:	f000 f821 	bl	800101c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fda:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fde:	f001 fcf7 	bl	80029d0 <HAL_PWREx_ControlVoltageScaling>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000fe8:	f000 f818 	bl	800101c <Error_Handler>
  }
}
 8000fec:	bf00      	nop
 8000fee:	37e0      	adds	r7, #224	; 0xe0
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	00024010 	.word	0x00024010

08000ff8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800100a:	f000 f8e3 	bl	80011d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40012c00 	.word	0x40012c00

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_UART5_Init+0x58>)
 8001032:	4a15      	ldr	r2, [pc, #84]	; (8001088 <MX_UART5_Init+0x5c>)
 8001034:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <MX_UART5_Init+0x58>)
 8001038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800103c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_UART5_Init+0x58>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_UART5_Init+0x58>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_UART5_Init+0x58>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_UART5_Init+0x58>)
 8001052:	220c      	movs	r2, #12
 8001054:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <MX_UART5_Init+0x58>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_UART5_Init+0x58>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <MX_UART5_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_UART5_Init+0x58>)
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_UART5_Init+0x58>)
 8001070:	f004 fe86 	bl	8005d80 <HAL_UART_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800107a:	f7ff ffcf 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000208 	.word	0x20000208
 8001088:	40005000 	.word	0x40005000

0800108c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a25      	ldr	r2, [pc, #148]	; (8001140 <HAL_UART_MspInit+0xb4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d144      	bne.n	8001138 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80010ae:	4b25      	ldr	r3, [pc, #148]	; (8001144 <HAL_UART_MspInit+0xb8>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	4a24      	ldr	r2, [pc, #144]	; (8001144 <HAL_UART_MspInit+0xb8>)
 80010b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010b8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ba:	4b22      	ldr	r3, [pc, #136]	; (8001144 <HAL_UART_MspInit+0xb8>)
 80010bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <HAL_UART_MspInit+0xb8>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	4a1e      	ldr	r2, [pc, #120]	; (8001144 <HAL_UART_MspInit+0xb8>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d2:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <HAL_UART_MspInit+0xb8>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_UART_MspInit+0xb8>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	4a18      	ldr	r2, [pc, #96]	; (8001144 <HAL_UART_MspInit+0xb8>)
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <HAL_UART_MspInit+0xb8>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001108:	2308      	movs	r3, #8
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	480d      	ldr	r0, [pc, #52]	; (8001148 <HAL_UART_MspInit+0xbc>)
 8001114:	f001 fa8c 	bl	8002630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001118:	2304      	movs	r3, #4
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001128:	2308      	movs	r3, #8
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <HAL_UART_MspInit+0xc0>)
 8001134:	f001 fa7c 	bl	8002630 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001138:	bf00      	nop
 800113a:	3728      	adds	r7, #40	; 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40005000 	.word	0x40005000
 8001144:	40021000 	.word	0x40021000
 8001148:	48000800 	.word	0x48000800
 800114c:	48000c00 	.word	0x48000c00

08001150 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001188 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001154:	f7ff fd6e 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001158:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800115a:	e003      	b.n	8001164 <LoopCopyDataInit>

0800115c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800115e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001160:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001162:	3104      	adds	r1, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001164:	480a      	ldr	r0, [pc, #40]	; (8001190 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001168:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800116a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800116c:	d3f6      	bcc.n	800115c <CopyDataInit>
	ldr	r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001170:	e002      	b.n	8001178 <LoopFillZerobss>

08001172 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001172:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001174:	f842 3b04 	str.w	r3, [r2], #4

08001178 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <LoopForever+0x16>)
	cmp	r2, r3
 800117a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800117c:	d3f9      	bcc.n	8001172 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800117e:	f005 fa3f 	bl	8006600 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001182:	f7ff fe5b 	bl	8000e3c <main>

08001186 <LoopForever>:

LoopForever:
    b LoopForever
 8001186:	e7fe      	b.n	8001186 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001188:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800118c:	080066d8 	.word	0x080066d8
	ldr	r0, =_sdata
 8001190:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001194:	20000060 	.word	0x20000060
	ldr	r2, =_sbss
 8001198:	20000060 	.word	0x20000060
	ldr	r3, = _ebss
 800119c:	20000290 	.word	0x20000290

080011a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC1_2_IRQHandler>

080011a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f001 fa0a 	bl	80025c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b2:	2000      	movs	r0, #0
 80011b4:	f7ff fcae 	bl	8000b14 <HAL_InitTick>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	e001      	b.n	80011c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011c4:	f7ff fc82 	bl	8000acc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	2000005c 	.word	0x2000005c
 80011f8:	2000028c 	.word	0x2000028c

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	2000028c 	.word	0x2000028c

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff ffee 	bl	80011fc <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_Delay+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffde 	bl	80011fc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2000005c 	.word	0x2000005c

0800125c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	609a      	str	r2, [r3, #8]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	431a      	orrs	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	609a      	str	r2, [r3, #8]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3360      	adds	r3, #96	; 0x60
 80012d6:	461a      	mov	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <LL_ADC_SetOffset+0x44>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	4313      	orrs	r3, r2
 80012f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012fc:	bf00      	nop
 80012fe:	371c      	adds	r7, #28
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	03fff000 	.word	0x03fff000

0800130c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3360      	adds	r3, #96	; 0x60
 800131a:	461a      	mov	r2, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001338:	b480      	push	{r7}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3360      	adds	r3, #96	; 0x60
 8001348:	461a      	mov	r2, r3
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	431a      	orrs	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001362:	bf00      	nop
 8001364:	371c      	adds	r7, #28
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800136e:	b480      	push	{r7}
 8001370:	b087      	sub	sp, #28
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3330      	adds	r3, #48	; 0x30
 800137e:	461a      	mov	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	0a1b      	lsrs	r3, r3, #8
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	4413      	add	r3, r2
 800138c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	f003 031f 	and.w	r3, r3, #31
 8001398:	211f      	movs	r1, #31
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	401a      	ands	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	0e9b      	lsrs	r3, r3, #26
 80013a6:	f003 011f 	and.w	r1, r3, #31
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	f003 031f 	and.w	r3, r3, #31
 80013b0:	fa01 f303 	lsl.w	r3, r1, r3
 80013b4:	431a      	orrs	r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013ba:	bf00      	nop
 80013bc:	371c      	adds	r7, #28
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b087      	sub	sp, #28
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3314      	adds	r3, #20
 80013d6:	461a      	mov	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	0e5b      	lsrs	r3, r3, #25
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	4413      	add	r3, r2
 80013e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	0d1b      	lsrs	r3, r3, #20
 80013ee:	f003 031f 	and.w	r3, r3, #31
 80013f2:	2107      	movs	r1, #7
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	401a      	ands	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	0d1b      	lsrs	r3, r3, #20
 8001400:	f003 031f 	and.w	r3, r3, #31
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	431a      	orrs	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001410:	bf00      	nop
 8001412:	371c      	adds	r7, #28
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001434:	43db      	mvns	r3, r3
 8001436:	401a      	ands	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0318 	and.w	r3, r3, #24
 800143e:	4908      	ldr	r1, [pc, #32]	; (8001460 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001440:	40d9      	lsrs	r1, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	400b      	ands	r3, r1
 8001446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800144a:	431a      	orrs	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	0007ffff 	.word	0x0007ffff

08001464 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 031f 	and.w	r3, r3, #31
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001490:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6093      	str	r3, [r2, #8]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014b8:	d101      	bne.n	80014be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001504:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001508:	d101      	bne.n	800150e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800152c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001530:	f043 0201 	orr.w	r2, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <LL_ADC_IsEnabled+0x18>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <LL_ADC_IsEnabled+0x1a>
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800157a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800157e:	f043 0204 	orr.w	r2, r3, #4
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d101      	bne.n	80015aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d101      	bne.n	80015d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e136      	b.n	8001868 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001604:	2b00      	cmp	r3, #0
 8001606:	d109      	bne.n	800161c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7fe ffd1 	bl	80005b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff3f 	bl	80014a4 <LL_ADC_IsDeepPowerDownEnabled>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d004      	beq.n	8001636 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff25 	bl	8001480 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff5a 	bl	80014f4 <LL_ADC_IsInternalRegulatorEnabled>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d115      	bne.n	8001672 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff3e 	bl	80014cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001650:	4b87      	ldr	r3, [pc, #540]	; (8001870 <HAL_ADC_Init+0x290>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	099b      	lsrs	r3, r3, #6
 8001656:	4a87      	ldr	r2, [pc, #540]	; (8001874 <HAL_ADC_Init+0x294>)
 8001658:	fba2 2303 	umull	r2, r3, r2, r3
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	3301      	adds	r3, #1
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001664:	e002      	b.n	800166c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	3b01      	subs	r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f9      	bne.n	8001666 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff3c 	bl	80014f4 <LL_ADC_IsInternalRegulatorEnabled>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10d      	bne.n	800169e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001686:	f043 0210 	orr.w	r2, r3, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	f043 0201 	orr.w	r2, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff ff75 	bl	8001592 <LL_ADC_REG_IsConversionOngoing>
 80016a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f040 80cf 	bne.w	8001856 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f040 80cb 	bne.w	8001856 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016c8:	f043 0202 	orr.w	r2, r3, #2
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff35 	bl	8001544 <LL_ADC_IsEnabled>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d115      	bne.n	800170c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016e0:	4865      	ldr	r0, [pc, #404]	; (8001878 <HAL_ADC_Init+0x298>)
 80016e2:	f7ff ff2f 	bl	8001544 <LL_ADC_IsEnabled>
 80016e6:	4604      	mov	r4, r0
 80016e8:	4864      	ldr	r0, [pc, #400]	; (800187c <HAL_ADC_Init+0x29c>)
 80016ea:	f7ff ff2b 	bl	8001544 <LL_ADC_IsEnabled>
 80016ee:	4603      	mov	r3, r0
 80016f0:	431c      	orrs	r4, r3
 80016f2:	4863      	ldr	r0, [pc, #396]	; (8001880 <HAL_ADC_Init+0x2a0>)
 80016f4:	f7ff ff26 	bl	8001544 <LL_ADC_IsEnabled>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4323      	orrs	r3, r4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d105      	bne.n	800170c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4619      	mov	r1, r3
 8001706:	485f      	ldr	r0, [pc, #380]	; (8001884 <HAL_ADC_Init+0x2a4>)
 8001708:	f7ff fda8 	bl	800125c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7e5b      	ldrb	r3, [r3, #25]
 8001710:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001716:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800171c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001722:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d106      	bne.n	8001748 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	3b01      	subs	r3, #1
 8001740:	045b      	lsls	r3, r3, #17
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	2b00      	cmp	r3, #0
 800174e:	d009      	beq.n	8001764 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001754:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	4b47      	ldr	r3, [pc, #284]	; (8001888 <HAL_ADC_Init+0x2a8>)
 800176c:	4013      	ands	r3, r2
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	69b9      	ldr	r1, [r7, #24]
 8001774:	430b      	orrs	r3, r1
 8001776:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff08 	bl	8001592 <LL_ADC_REG_IsConversionOngoing>
 8001782:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff15 	bl	80015b8 <LL_ADC_INJ_IsConversionOngoing>
 800178e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d13d      	bne.n	8001812 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d13a      	bne.n	8001812 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017a0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017a8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017b8:	f023 0302 	bic.w	r3, r3, #2
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	69b9      	ldr	r1, [r7, #24]
 80017c2:	430b      	orrs	r3, r1
 80017c4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d118      	bne.n	8001802 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017da:	f023 0304 	bic.w	r3, r3, #4
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017e6:	4311      	orrs	r1, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017ec:	4311      	orrs	r1, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017f2:	430a      	orrs	r2, r1
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	611a      	str	r2, [r3, #16]
 8001800:	e007      	b.n	8001812 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0201 	bic.w	r2, r2, #1
 8001810:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d10c      	bne.n	8001834 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	f023 010f 	bic.w	r1, r3, #15
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	1e5a      	subs	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	631a      	str	r2, [r3, #48]	; 0x30
 8001832:	e007      	b.n	8001844 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 020f 	bic.w	r2, r2, #15
 8001842:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001848:	f023 0303 	bic.w	r3, r3, #3
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	655a      	str	r2, [r3, #84]	; 0x54
 8001854:	e007      	b.n	8001866 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185a:	f043 0210 	orr.w	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001866:	7ffb      	ldrb	r3, [r7, #31]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3724      	adds	r7, #36	; 0x24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd90      	pop	{r4, r7, pc}
 8001870:	20000054 	.word	0x20000054
 8001874:	053e2d63 	.word	0x053e2d63
 8001878:	50040000 	.word	0x50040000
 800187c:	50040100 	.word	0x50040100
 8001880:	50040200 	.word	0x50040200
 8001884:	50040300 	.word	0x50040300
 8001888:	fff0c007 	.word	0xfff0c007

0800188c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001894:	4857      	ldr	r0, [pc, #348]	; (80019f4 <HAL_ADC_Start+0x168>)
 8001896:	f7ff fde5 	bl	8001464 <LL_ADC_GetMultimode>
 800189a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fe76 	bl	8001592 <LL_ADC_REG_IsConversionOngoing>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f040 809c 	bne.w	80019e6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_ADC_Start+0x30>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e097      	b.n	80019ec <HAL_ADC_Start+0x160>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 fc99 	bl	80021fc <ADC_Enable>
 80018ca:	4603      	mov	r3, r0
 80018cc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f040 8083 	bne.w	80019dc <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a42      	ldr	r2, [pc, #264]	; (80019f8 <HAL_ADC_Start+0x16c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d002      	beq.n	80018fa <HAL_ADC_Start+0x6e>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	e000      	b.n	80018fc <HAL_ADC_Start+0x70>
 80018fa:	4b40      	ldr	r3, [pc, #256]	; (80019fc <HAL_ADC_Start+0x170>)
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	4293      	cmp	r3, r2
 8001902:	d002      	beq.n	800190a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d105      	bne.n	8001916 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800191e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001922:	d106      	bne.n	8001932 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	f023 0206 	bic.w	r2, r3, #6
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	659a      	str	r2, [r3, #88]	; 0x58
 8001930:	e002      	b.n	8001938 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	221c      	movs	r2, #28
 800193e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a2a      	ldr	r2, [pc, #168]	; (80019f8 <HAL_ADC_Start+0x16c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d002      	beq.n	8001958 <HAL_ADC_Start+0xcc>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	e000      	b.n	800195a <HAL_ADC_Start+0xce>
 8001958:	4b28      	ldr	r3, [pc, #160]	; (80019fc <HAL_ADC_Start+0x170>)
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	4293      	cmp	r3, r2
 8001960:	d008      	beq.n	8001974 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	2b05      	cmp	r3, #5
 800196c:	d002      	beq.n	8001974 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	2b09      	cmp	r3, #9
 8001972:	d114      	bne.n	800199e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d007      	beq.n	8001992 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001986:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800198a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fde7 	bl	800156a <LL_ADC_REG_StartConversion>
 800199c:	e025      	b.n	80019ea <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <HAL_ADC_Start+0x16c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d002      	beq.n	80019ba <HAL_ADC_Start+0x12e>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	e000      	b.n	80019bc <HAL_ADC_Start+0x130>
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <HAL_ADC_Start+0x170>)
 80019bc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00f      	beq.n	80019ea <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	655a      	str	r2, [r3, #84]	; 0x54
 80019da:	e006      	b.n	80019ea <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80019e4:	e001      	b.n	80019ea <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019e6:	2302      	movs	r3, #2
 80019e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	50040300 	.word	0x50040300
 80019f8:	50040100 	.word	0x50040100
 80019fc:	50040000 	.word	0x50040000

08001a00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b0b6      	sub	sp, #216	; 0xd8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x22>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e3c7      	b.n	80021ce <HAL_ADC_ConfigChannel+0x7b2>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fda1 	bl	8001592 <LL_ADC_REG_IsConversionOngoing>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f040 83a8 	bne.w	80021a8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	d824      	bhi.n	8001aaa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	3b02      	subs	r3, #2
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d81b      	bhi.n	8001aa2 <HAL_ADC_ConfigChannel+0x86>
 8001a6a:	a201      	add	r2, pc, #4	; (adr r2, 8001a70 <HAL_ADC_ConfigChannel+0x54>)
 8001a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a70:	08001a81 	.word	0x08001a81
 8001a74:	08001a89 	.word	0x08001a89
 8001a78:	08001a91 	.word	0x08001a91
 8001a7c:	08001a99 	.word	0x08001a99
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	220c      	movs	r2, #12
 8001a84:	605a      	str	r2, [r3, #4]
          break;
 8001a86:	e011      	b.n	8001aac <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2212      	movs	r2, #18
 8001a8c:	605a      	str	r2, [r3, #4]
          break;
 8001a8e:	e00d      	b.n	8001aac <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2218      	movs	r2, #24
 8001a94:	605a      	str	r2, [r3, #4]
          break;
 8001a96:	e009      	b.n	8001aac <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a9e:	605a      	str	r2, [r3, #4]
          break;
 8001aa0:	e004      	b.n	8001aac <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2206      	movs	r2, #6
 8001aa6:	605a      	str	r2, [r3, #4]
          break;
 8001aa8:	e000      	b.n	8001aac <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001aaa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	f7ff fc58 	bl	800136e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fd65 	bl	8001592 <LL_ADC_REG_IsConversionOngoing>
 8001ac8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fd71 	bl	80015b8 <LL_ADC_INJ_IsConversionOngoing>
 8001ad6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ada:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f040 81a6 	bne.w	8001e30 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ae4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f040 81a1 	bne.w	8001e30 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6819      	ldr	r1, [r3, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	461a      	mov	r2, r3
 8001afc:	f7ff fc63 	bl	80013c6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	08db      	lsrs	r3, r3, #3
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d00a      	beq.n	8001b38 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6919      	ldr	r1, [r3, #16]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b32:	f7ff fbc7 	bl	80012c4 <LL_ADC_SetOffset>
 8001b36:	e17b      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fbe4 	bl	800130c <LL_ADC_GetOffsetChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10a      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x148>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fbd9 	bl	800130c <LL_ADC_GetOffsetChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	0e9b      	lsrs	r3, r3, #26
 8001b5e:	f003 021f 	and.w	r2, r3, #31
 8001b62:	e01e      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x186>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fbce 	bl	800130c <LL_ADC_GetOffsetChannel>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001b92:	2320      	movs	r3, #32
 8001b94:	e004      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001b96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d105      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x19e>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	0e9b      	lsrs	r3, r3, #26
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	e018      	b.n	8001bec <HAL_ADC_ConfigChannel+0x1d0>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bc6:	fa93 f3a3 	rbit	r3, r3
 8001bca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001bce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001bd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001bde:	2320      	movs	r3, #32
 8001be0:	e004      	b.n	8001bec <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001be2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d106      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fb9d 	bl	8001338 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2101      	movs	r1, #1
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fb81 	bl	800130c <LL_ADC_GetOffsetChannel>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10a      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x20e>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fb76 	bl	800130c <LL_ADC_GetOffsetChannel>
 8001c20:	4603      	mov	r3, r0
 8001c22:	0e9b      	lsrs	r3, r3, #26
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	e01e      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x24c>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fb6b 	bl	800130c <LL_ADC_GetOffsetChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001c58:	2320      	movs	r3, #32
 8001c5a:	e004      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001c5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d105      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x264>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0e9b      	lsrs	r3, r3, #26
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	e018      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x296>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	e004      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d106      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fb3a 	bl	8001338 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2102      	movs	r1, #2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fb1e 	bl	800130c <LL_ADC_GetOffsetChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10a      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x2d4>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2102      	movs	r1, #2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fb13 	bl	800130c <LL_ADC_GetOffsetChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	0e9b      	lsrs	r3, r3, #26
 8001cea:	f003 021f 	and.w	r2, r3, #31
 8001cee:	e01e      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x312>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fb08 	bl	800130c <LL_ADC_GetOffsetChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001d1e:	2320      	movs	r3, #32
 8001d20:	e004      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001d22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d105      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x32a>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	0e9b      	lsrs	r3, r3, #26
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	e016      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x358>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001d66:	2320      	movs	r3, #32
 8001d68:	e004      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d106      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2102      	movs	r1, #2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fad9 	bl	8001338 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2103      	movs	r1, #3
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fabd 	bl	800130c <LL_ADC_GetOffsetChannel>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10a      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x396>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2103      	movs	r1, #3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fab2 	bl	800130c <LL_ADC_GetOffsetChannel>
 8001da8:	4603      	mov	r3, r0
 8001daa:	0e9b      	lsrs	r3, r3, #26
 8001dac:	f003 021f 	and.w	r2, r3, #31
 8001db0:	e017      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x3c6>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2103      	movs	r1, #3
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff faa7 	bl	800130c <LL_ADC_GetOffsetChannel>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dcc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001dce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	e003      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dda:	fab3 f383 	clz	r3, r3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d105      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x3de>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	0e9b      	lsrs	r3, r3, #26
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	e011      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x402>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001e12:	2320      	movs	r3, #32
 8001e14:	e003      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d106      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2200      	movs	r2, #0
 8001e28:	2103      	movs	r1, #3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fa84 	bl	8001338 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fb85 	bl	8001544 <LL_ADC_IsEnabled>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f040 813f 	bne.w	80020c0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6819      	ldr	r1, [r3, #0]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f7ff fae4 	bl	800141c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4a8e      	ldr	r2, [pc, #568]	; (8002094 <HAL_ADC_ConfigChannel+0x678>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	f040 8130 	bne.w	80020c0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10b      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x46c>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0e9b      	lsrs	r3, r3, #26
 8001e76:	3301      	adds	r3, #1
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	2b09      	cmp	r3, #9
 8001e7e:	bf94      	ite	ls
 8001e80:	2301      	movls	r3, #1
 8001e82:	2300      	movhi	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	e019      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x4a0>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e98:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	e003      	b.n	8001eac <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	3301      	adds	r3, #1
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	2b09      	cmp	r3, #9
 8001eb4:	bf94      	ite	ls
 8001eb6:	2301      	movls	r3, #1
 8001eb8:	2300      	movhi	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d079      	beq.n	8001fb4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d107      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x4c0>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	069b      	lsls	r3, r3, #26
 8001ed6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eda:	e015      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x4ec>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eec:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001ef4:	2320      	movs	r3, #32
 8001ef6:	e003      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	3301      	adds	r3, #1
 8001f02:	069b      	lsls	r3, r3, #26
 8001f04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d109      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x50c>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0e9b      	lsrs	r3, r3, #26
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	2101      	movs	r1, #1
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	e017      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x53c>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001f40:	2320      	movs	r3, #32
 8001f42:	e003      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2101      	movs	r1, #1
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	ea42 0103 	orr.w	r1, r2, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10a      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x562>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	0e9b      	lsrs	r3, r3, #26
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	051b      	lsls	r3, r3, #20
 8001f7c:	e018      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x594>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001f96:	2320      	movs	r3, #32
 8001f98:	e003      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f9c:	fab3 f383 	clz	r3, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	e080      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d107      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x5b4>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0e9b      	lsrs	r3, r3, #26
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	069b      	lsls	r3, r3, #26
 8001fca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fce:	e015      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x5e0>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	e003      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	069b      	lsls	r3, r3, #26
 8001ff8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <HAL_ADC_ConfigChannel+0x600>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	0e9b      	lsrs	r3, r3, #26
 800200e:	3301      	adds	r3, #1
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	2101      	movs	r1, #1
 8002016:	fa01 f303 	lsl.w	r3, r1, r3
 800201a:	e017      	b.n	800204c <HAL_ADC_ConfigChannel+0x630>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	61fb      	str	r3, [r7, #28]
  return result;
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002034:	2320      	movs	r3, #32
 8002036:	e003      	b.n	8002040 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	3301      	adds	r3, #1
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	2101      	movs	r1, #1
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	ea42 0103 	orr.w	r1, r2, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10d      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x65c>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	0e9b      	lsrs	r3, r3, #26
 8002062:	3301      	adds	r3, #1
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	3b1e      	subs	r3, #30
 8002070:	051b      	lsls	r3, r3, #20
 8002072:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002076:	e01d      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x698>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	613b      	str	r3, [r7, #16]
  return result;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d103      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002090:	2320      	movs	r3, #32
 8002092:	e005      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x684>
 8002094:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	3301      	adds	r3, #1
 80020a2:	f003 021f 	and.w	r2, r3, #31
 80020a6:	4613      	mov	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	4413      	add	r3, r2
 80020ac:	3b1e      	subs	r3, #30
 80020ae:	051b      	lsls	r3, r3, #20
 80020b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020b4:	430b      	orrs	r3, r1
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	6892      	ldr	r2, [r2, #8]
 80020ba:	4619      	mov	r1, r3
 80020bc:	f7ff f983 	bl	80013c6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b44      	ldr	r3, [pc, #272]	; (80021d8 <HAL_ADC_ConfigChannel+0x7bc>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d07a      	beq.n	80021c2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020cc:	4843      	ldr	r0, [pc, #268]	; (80021dc <HAL_ADC_ConfigChannel+0x7c0>)
 80020ce:	f7ff f8eb 	bl	80012a8 <LL_ADC_GetCommonPathInternalCh>
 80020d2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a41      	ldr	r2, [pc, #260]	; (80021e0 <HAL_ADC_ConfigChannel+0x7c4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d12c      	bne.n	800213a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d126      	bne.n	800213a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a3c      	ldr	r2, [pc, #240]	; (80021e4 <HAL_ADC_ConfigChannel+0x7c8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d004      	beq.n	8002100 <HAL_ADC_ConfigChannel+0x6e4>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a3b      	ldr	r2, [pc, #236]	; (80021e8 <HAL_ADC_ConfigChannel+0x7cc>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d15d      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002104:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002108:	4619      	mov	r1, r3
 800210a:	4834      	ldr	r0, [pc, #208]	; (80021dc <HAL_ADC_ConfigChannel+0x7c0>)
 800210c:	f7ff f8b9 	bl	8001282 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002110:	4b36      	ldr	r3, [pc, #216]	; (80021ec <HAL_ADC_ConfigChannel+0x7d0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	099b      	lsrs	r3, r3, #6
 8002116:	4a36      	ldr	r2, [pc, #216]	; (80021f0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002118:	fba2 2303 	umull	r2, r3, r2, r3
 800211c:	099b      	lsrs	r3, r3, #6
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	4613      	mov	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800212a:	e002      	b.n	8002132 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3b01      	subs	r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f9      	bne.n	800212c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002138:	e040      	b.n	80021bc <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a2d      	ldr	r2, [pc, #180]	; (80021f4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d118      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x75a>
 8002144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d112      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a23      	ldr	r2, [pc, #140]	; (80021e4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d004      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x748>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d12d      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002168:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800216c:	4619      	mov	r1, r3
 800216e:	481b      	ldr	r0, [pc, #108]	; (80021dc <HAL_ADC_ConfigChannel+0x7c0>)
 8002170:	f7ff f887 	bl	8001282 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002174:	e024      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <HAL_ADC_ConfigChannel+0x7dc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d120      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d11a      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d115      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002196:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800219a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800219e:	4619      	mov	r1, r3
 80021a0:	480e      	ldr	r0, [pc, #56]	; (80021dc <HAL_ADC_ConfigChannel+0x7c0>)
 80021a2:	f7ff f86e 	bl	8001282 <LL_ADC_SetCommonPathInternalCh>
 80021a6:	e00c      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	f043 0220 	orr.w	r2, r3, #32
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80021ba:	e002      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021bc:	bf00      	nop
 80021be:	e000      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	37d8      	adds	r7, #216	; 0xd8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	80080000 	.word	0x80080000
 80021dc:	50040300 	.word	0x50040300
 80021e0:	c7520000 	.word	0xc7520000
 80021e4:	50040000 	.word	0x50040000
 80021e8:	50040200 	.word	0x50040200
 80021ec:	20000054 	.word	0x20000054
 80021f0:	053e2d63 	.word	0x053e2d63
 80021f4:	cb840000 	.word	0xcb840000
 80021f8:	80000001 	.word	0x80000001

080021fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff f99b 	bl	8001544 <LL_ADC_IsEnabled>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d14d      	bne.n	80022b0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	4b28      	ldr	r3, [pc, #160]	; (80022bc <ADC_Enable+0xc0>)
 800221c:	4013      	ands	r3, r2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00d      	beq.n	800223e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002226:	f043 0210 	orr.w	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e039      	b.n	80022b2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff f96a 	bl	800151c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002248:	f7fe ffd8 	bl	80011fc <HAL_GetTick>
 800224c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800224e:	e028      	b.n	80022a2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff f975 	bl	8001544 <LL_ADC_IsEnabled>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d104      	bne.n	800226a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff f959 	bl	800151c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800226a:	f7fe ffc7 	bl	80011fc <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d914      	bls.n	80022a2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d00d      	beq.n	80022a2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228a:	f043 0210 	orr.w	r2, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002296:	f043 0201 	orr.w	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e007      	b.n	80022b2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d1cf      	bne.n	8002250 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	8000003f 	.word	0x8000003f

080022c0 <LL_ADC_IsEnabled>:
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <LL_ADC_IsEnabled+0x18>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <LL_ADC_IsEnabled+0x1a>
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d101      	bne.n	80022fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b09f      	sub	sp, #124	; 0x7c
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002326:	2302      	movs	r3, #2
 8002328:	e093      	b.n	8002452 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002332:	2300      	movs	r3, #0
 8002334:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002336:	2300      	movs	r3, #0
 8002338:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a47      	ldr	r2, [pc, #284]	; (800245c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d102      	bne.n	800234a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002344:	4b46      	ldr	r3, [pc, #280]	; (8002460 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	e001      	b.n	800234e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10b      	bne.n	800236c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	f043 0220 	orr.w	r2, r3, #32
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e072      	b.n	8002452 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ffb9 	bl	80022e6 <LL_ADC_REG_IsConversionOngoing>
 8002374:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ffb3 	bl	80022e6 <LL_ADC_REG_IsConversionOngoing>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d154      	bne.n	8002430 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002388:	2b00      	cmp	r3, #0
 800238a:	d151      	bne.n	8002430 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800238c:	4b35      	ldr	r3, [pc, #212]	; (8002464 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800238e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d02c      	beq.n	80023f2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023aa:	035b      	lsls	r3, r3, #13
 80023ac:	430b      	orrs	r3, r1
 80023ae:	431a      	orrs	r2, r3
 80023b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023b4:	4829      	ldr	r0, [pc, #164]	; (800245c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023b6:	f7ff ff83 	bl	80022c0 <LL_ADC_IsEnabled>
 80023ba:	4604      	mov	r4, r0
 80023bc:	4828      	ldr	r0, [pc, #160]	; (8002460 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80023be:	f7ff ff7f 	bl	80022c0 <LL_ADC_IsEnabled>
 80023c2:	4603      	mov	r3, r0
 80023c4:	431c      	orrs	r4, r3
 80023c6:	4828      	ldr	r0, [pc, #160]	; (8002468 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80023c8:	f7ff ff7a 	bl	80022c0 <LL_ADC_IsEnabled>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4323      	orrs	r3, r4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d137      	bne.n	8002444 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80023d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023dc:	f023 030f 	bic.w	r3, r3, #15
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	6811      	ldr	r1, [r2, #0]
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	6892      	ldr	r2, [r2, #8]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	431a      	orrs	r2, r3
 80023ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023f0:	e028      	b.n	8002444 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023fe:	4817      	ldr	r0, [pc, #92]	; (800245c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002400:	f7ff ff5e 	bl	80022c0 <LL_ADC_IsEnabled>
 8002404:	4604      	mov	r4, r0
 8002406:	4816      	ldr	r0, [pc, #88]	; (8002460 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002408:	f7ff ff5a 	bl	80022c0 <LL_ADC_IsEnabled>
 800240c:	4603      	mov	r3, r0
 800240e:	431c      	orrs	r4, r3
 8002410:	4815      	ldr	r0, [pc, #84]	; (8002468 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002412:	f7ff ff55 	bl	80022c0 <LL_ADC_IsEnabled>
 8002416:	4603      	mov	r3, r0
 8002418:	4323      	orrs	r3, r4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d112      	bne.n	8002444 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800241e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002426:	f023 030f 	bic.w	r3, r3, #15
 800242a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800242c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800242e:	e009      	b.n	8002444 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	f043 0220 	orr.w	r2, r3, #32
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002442:	e000      	b.n	8002446 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002444:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800244e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002452:	4618      	mov	r0, r3
 8002454:	377c      	adds	r7, #124	; 0x7c
 8002456:	46bd      	mov	sp, r7
 8002458:	bd90      	pop	{r4, r7, pc}
 800245a:	bf00      	nop
 800245c:	50040000 	.word	0x50040000
 8002460:	50040100 	.word	0x50040100
 8002464:	50040300 	.word	0x50040300
 8002468:	50040200 	.word	0x50040200

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249e:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	60d3      	str	r3, [r2, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db0b      	blt.n	80024fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	4907      	ldr	r1, [pc, #28]	; (8002508 <__NVIC_EnableIRQ+0x38>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2001      	movs	r0, #1
 80024f2:	fa00 f202 	lsl.w	r2, r0, r2
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e100 	.word	0xe000e100

0800250c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	db0a      	blt.n	8002536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	490c      	ldr	r1, [pc, #48]	; (8002558 <__NVIC_SetPriority+0x4c>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	0112      	lsls	r2, r2, #4
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	440b      	add	r3, r1
 8002530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002534:	e00a      	b.n	800254c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4908      	ldr	r1, [pc, #32]	; (800255c <__NVIC_SetPriority+0x50>)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	3b04      	subs	r3, #4
 8002544:	0112      	lsls	r2, r2, #4
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	440b      	add	r3, r1
 800254a:	761a      	strb	r2, [r3, #24]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000e100 	.word	0xe000e100
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f1c3 0307 	rsb	r3, r3, #7
 800257a:	2b04      	cmp	r3, #4
 800257c:	bf28      	it	cs
 800257e:	2304      	movcs	r3, #4
 8002580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3304      	adds	r3, #4
 8002586:	2b06      	cmp	r3, #6
 8002588:	d902      	bls.n	8002590 <NVIC_EncodePriority+0x30>
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3b03      	subs	r3, #3
 800258e:	e000      	b.n	8002592 <NVIC_EncodePriority+0x32>
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	f04f 32ff 	mov.w	r2, #4294967295
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	401a      	ands	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43d9      	mvns	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	4313      	orrs	r3, r2
         );
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	; 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ff4c 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025ee:	f7ff ff61 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 80025f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	6978      	ldr	r0, [r7, #20]
 80025fa:	f7ff ffb1 	bl	8002560 <NVIC_EncodePriority>
 80025fe:	4602      	mov	r2, r0
 8002600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff80 	bl	800250c <__NVIC_SetPriority>
}
 800260c:	bf00      	nop
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff ff54 	bl	80024d0 <__NVIC_EnableIRQ>
}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800263e:	e17f      	b.n	8002940 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	2101      	movs	r1, #1
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	4013      	ands	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8171 	beq.w	800293a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d00b      	beq.n	8002678 <HAL_GPIO_Init+0x48>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d007      	beq.n	8002678 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800266c:	2b11      	cmp	r3, #17
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b12      	cmp	r3, #18
 8002676:	d130      	bne.n	80026da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	2203      	movs	r2, #3
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ae:	2201      	movs	r2, #1
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4013      	ands	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	f003 0201 	and.w	r2, r3, #1
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d118      	bne.n	8002718 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80026ec:	2201      	movs	r2, #1
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	08db      	lsrs	r3, r3, #3
 8002702:	f003 0201 	and.w	r2, r3, #1
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2203      	movs	r2, #3
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x128>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b12      	cmp	r3, #18
 8002756:	d123      	bne.n	80027a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	08da      	lsrs	r2, r3, #3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3208      	adds	r2, #8
 8002760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002764:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	220f      	movs	r2, #15
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	08da      	lsrs	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3208      	adds	r2, #8
 800279a:	6939      	ldr	r1, [r7, #16]
 800279c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	2203      	movs	r2, #3
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4013      	ands	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0203 	and.w	r2, r3, #3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80ac 	beq.w	800293a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e2:	4b5f      	ldr	r3, [pc, #380]	; (8002960 <HAL_GPIO_Init+0x330>)
 80027e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e6:	4a5e      	ldr	r2, [pc, #376]	; (8002960 <HAL_GPIO_Init+0x330>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6613      	str	r3, [r2, #96]	; 0x60
 80027ee:	4b5c      	ldr	r3, [pc, #368]	; (8002960 <HAL_GPIO_Init+0x330>)
 80027f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027fa:	4a5a      	ldr	r2, [pc, #360]	; (8002964 <HAL_GPIO_Init+0x334>)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	089b      	lsrs	r3, r3, #2
 8002800:	3302      	adds	r3, #2
 8002802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002806:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	220f      	movs	r2, #15
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002824:	d025      	beq.n	8002872 <HAL_GPIO_Init+0x242>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a4f      	ldr	r2, [pc, #316]	; (8002968 <HAL_GPIO_Init+0x338>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01f      	beq.n	800286e <HAL_GPIO_Init+0x23e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a4e      	ldr	r2, [pc, #312]	; (800296c <HAL_GPIO_Init+0x33c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d019      	beq.n	800286a <HAL_GPIO_Init+0x23a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4d      	ldr	r2, [pc, #308]	; (8002970 <HAL_GPIO_Init+0x340>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <HAL_GPIO_Init+0x236>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a4c      	ldr	r2, [pc, #304]	; (8002974 <HAL_GPIO_Init+0x344>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00d      	beq.n	8002862 <HAL_GPIO_Init+0x232>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4b      	ldr	r2, [pc, #300]	; (8002978 <HAL_GPIO_Init+0x348>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d007      	beq.n	800285e <HAL_GPIO_Init+0x22e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4a      	ldr	r2, [pc, #296]	; (800297c <HAL_GPIO_Init+0x34c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d101      	bne.n	800285a <HAL_GPIO_Init+0x22a>
 8002856:	2306      	movs	r3, #6
 8002858:	e00c      	b.n	8002874 <HAL_GPIO_Init+0x244>
 800285a:	2307      	movs	r3, #7
 800285c:	e00a      	b.n	8002874 <HAL_GPIO_Init+0x244>
 800285e:	2305      	movs	r3, #5
 8002860:	e008      	b.n	8002874 <HAL_GPIO_Init+0x244>
 8002862:	2304      	movs	r3, #4
 8002864:	e006      	b.n	8002874 <HAL_GPIO_Init+0x244>
 8002866:	2303      	movs	r3, #3
 8002868:	e004      	b.n	8002874 <HAL_GPIO_Init+0x244>
 800286a:	2302      	movs	r3, #2
 800286c:	e002      	b.n	8002874 <HAL_GPIO_Init+0x244>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_GPIO_Init+0x244>
 8002872:	2300      	movs	r3, #0
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	f002 0203 	and.w	r2, r2, #3
 800287a:	0092      	lsls	r2, r2, #2
 800287c:	4093      	lsls	r3, r2
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002884:	4937      	ldr	r1, [pc, #220]	; (8002964 <HAL_GPIO_Init+0x334>)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	089b      	lsrs	r3, r3, #2
 800288a:	3302      	adds	r3, #2
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002892:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <HAL_GPIO_Init+0x350>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	43db      	mvns	r3, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028b6:	4a32      	ldr	r2, [pc, #200]	; (8002980 <HAL_GPIO_Init+0x350>)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80028bc:	4b30      	ldr	r3, [pc, #192]	; (8002980 <HAL_GPIO_Init+0x350>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028e0:	4a27      	ldr	r2, [pc, #156]	; (8002980 <HAL_GPIO_Init+0x350>)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028e6:	4b26      	ldr	r3, [pc, #152]	; (8002980 <HAL_GPIO_Init+0x350>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800290a:	4a1d      	ldr	r2, [pc, #116]	; (8002980 <HAL_GPIO_Init+0x350>)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <HAL_GPIO_Init+0x350>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	43db      	mvns	r3, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4013      	ands	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002934:	4a12      	ldr	r2, [pc, #72]	; (8002980 <HAL_GPIO_Init+0x350>)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3301      	adds	r3, #1
 800293e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa22 f303 	lsr.w	r3, r2, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	f47f ae78 	bne.w	8002640 <HAL_GPIO_Init+0x10>
  }
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
 8002964:	40010000 	.word	0x40010000
 8002968:	48000400 	.word	0x48000400
 800296c:	48000800 	.word	0x48000800
 8002970:	48000c00 	.word	0x48000c00
 8002974:	48001000 	.word	0x48001000
 8002978:	48001400 	.word	0x48001400
 800297c:	48001800 	.word	0x48001800
 8002980:	40010400 	.word	0x40010400

08002984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	807b      	strh	r3, [r7, #2]
 8002990:	4613      	mov	r3, r2
 8002992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002994:	787b      	ldrb	r3, [r7, #1]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800299a:	887a      	ldrh	r2, [r7, #2]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029a0:	e002      	b.n	80029a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <HAL_PWREx_GetVoltageRange+0x18>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40007000 	.word	0x40007000

080029d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029de:	d130      	bne.n	8002a42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029e0:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ec:	d038      	beq.n	8002a60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029f6:	4a1e      	ldr	r2, [pc, #120]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029fe:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2232      	movs	r2, #50	; 0x32
 8002a04:	fb02 f303 	mul.w	r3, r2, r3
 8002a08:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	0c9b      	lsrs	r3, r3, #18
 8002a10:	3301      	adds	r3, #1
 8002a12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a14:	e002      	b.n	8002a1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a1c:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a28:	d102      	bne.n	8002a30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f2      	bne.n	8002a16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3c:	d110      	bne.n	8002a60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e00f      	b.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4e:	d007      	beq.n	8002a60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a50:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a58:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40007000 	.word	0x40007000
 8002a74:	20000054 	.word	0x20000054
 8002a78:	431bde83 	.word	0x431bde83

08002a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e3d4      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a8e:	4ba1      	ldr	r3, [pc, #644]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a98:	4b9e      	ldr	r3, [pc, #632]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80e4 	beq.w	8002c78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d007      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x4a>
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	2b0c      	cmp	r3, #12
 8002aba:	f040 808b 	bne.w	8002bd4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	f040 8087 	bne.w	8002bd4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ac6:	4b93      	ldr	r3, [pc, #588]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x62>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e3ac      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1a      	ldr	r2, [r3, #32]
 8002ae2:	4b8c      	ldr	r3, [pc, #560]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d004      	beq.n	8002af8 <HAL_RCC_OscConfig+0x7c>
 8002aee:	4b89      	ldr	r3, [pc, #548]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af6:	e005      	b.n	8002b04 <HAL_RCC_OscConfig+0x88>
 8002af8:	4b86      	ldr	r3, [pc, #536]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d223      	bcs.n	8002b50 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fd73 	bl	80035f8 <RCC_SetFlashLatencyFromMSIRange>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e38d      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b1c:	4b7d      	ldr	r3, [pc, #500]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a7c      	ldr	r2, [pc, #496]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b22:	f043 0308 	orr.w	r3, r3, #8
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	4b7a      	ldr	r3, [pc, #488]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	4977      	ldr	r1, [pc, #476]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b3a:	4b76      	ldr	r3, [pc, #472]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	4972      	ldr	r1, [pc, #456]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
 8002b4e:	e025      	b.n	8002b9c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b50:	4b70      	ldr	r3, [pc, #448]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a6f      	ldr	r2, [pc, #444]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b56:	f043 0308 	orr.w	r3, r3, #8
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b6d      	ldr	r3, [pc, #436]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	496a      	ldr	r1, [pc, #424]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b6e:	4b69      	ldr	r3, [pc, #420]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	4965      	ldr	r1, [pc, #404]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d109      	bne.n	8002b9c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fd33 	bl	80035f8 <RCC_SetFlashLatencyFromMSIRange>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e34d      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b9c:	f000 fc36 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4b5c      	ldr	r3, [pc, #368]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	495a      	ldr	r1, [pc, #360]	; (8002d18 <HAL_RCC_OscConfig+0x29c>)
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb8:	4a58      	ldr	r2, [pc, #352]	; (8002d1c <HAL_RCC_OscConfig+0x2a0>)
 8002bba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bbc:	4b58      	ldr	r3, [pc, #352]	; (8002d20 <HAL_RCC_OscConfig+0x2a4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fd ffa7 	bl	8000b14 <HAL_InitTick>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d052      	beq.n	8002c76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	e331      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d032      	beq.n	8002c42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bdc:	4b4d      	ldr	r3, [pc, #308]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a4c      	ldr	r2, [pc, #304]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002be8:	f7fe fb08 	bl	80011fc <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bf0:	f7fe fb04 	bl	80011fc <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e31a      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c02:	4b44      	ldr	r3, [pc, #272]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c0e:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a40      	ldr	r2, [pc, #256]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c14:	f043 0308 	orr.w	r3, r3, #8
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b3e      	ldr	r3, [pc, #248]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	493b      	ldr	r1, [pc, #236]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c2c:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	021b      	lsls	r3, r3, #8
 8002c3a:	4936      	ldr	r1, [pc, #216]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
 8002c40:	e01a      	b.n	8002c78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c42:	4b34      	ldr	r3, [pc, #208]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a33      	ldr	r2, [pc, #204]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c48:	f023 0301 	bic.w	r3, r3, #1
 8002c4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fad5 	bl	80011fc <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c56:	f7fe fad1 	bl	80011fc <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e2e7      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c68:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1f0      	bne.n	8002c56 <HAL_RCC_OscConfig+0x1da>
 8002c74:	e000      	b.n	8002c78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d074      	beq.n	8002d6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d005      	beq.n	8002c96 <HAL_RCC_OscConfig+0x21a>
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b0c      	cmp	r3, #12
 8002c8e:	d10e      	bne.n	8002cae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d10b      	bne.n	8002cae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c96:	4b1f      	ldr	r3, [pc, #124]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d064      	beq.n	8002d6c <HAL_RCC_OscConfig+0x2f0>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d160      	bne.n	8002d6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e2c4      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x24a>
 8002cb8:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	e01d      	b.n	8002d02 <HAL_RCC_OscConfig+0x286>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cce:	d10c      	bne.n	8002cea <HAL_RCC_OscConfig+0x26e>
 8002cd0:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0c      	ldr	r2, [pc, #48]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	e00b      	b.n	8002d02 <HAL_RCC_OscConfig+0x286>
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a06      	ldr	r2, [pc, #24]	; (8002d14 <HAL_RCC_OscConfig+0x298>)
 8002cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7fe fa77 	bl	80011fc <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d10:	e011      	b.n	8002d36 <HAL_RCC_OscConfig+0x2ba>
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	08006680 	.word	0x08006680
 8002d1c:	20000054 	.word	0x20000054
 8002d20:	20000058 	.word	0x20000058
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d24:	f7fe fa6a 	bl	80011fc <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e280      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d36:	4baf      	ldr	r3, [pc, #700]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x2a8>
 8002d42:	e014      	b.n	8002d6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe fa5a 	bl	80011fc <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fe fa56 	bl	80011fc <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e26c      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d5e:	4ba5      	ldr	r3, [pc, #660]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x2d0>
 8002d6a:	e000      	b.n	8002d6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d060      	beq.n	8002e3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_OscConfig+0x310>
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d119      	bne.n	8002dba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d116      	bne.n	8002dba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d8c:	4b99      	ldr	r3, [pc, #612]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_OscConfig+0x328>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e249      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da4:	4b93      	ldr	r3, [pc, #588]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	061b      	lsls	r3, r3, #24
 8002db2:	4990      	ldr	r1, [pc, #576]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002db8:	e040      	b.n	8002e3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d023      	beq.n	8002e0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc2:	4b8c      	ldr	r3, [pc, #560]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a8b      	ldr	r2, [pc, #556]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7fe fa15 	bl	80011fc <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd6:	f7fe fa11 	bl	80011fc <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e227      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de8:	4b82      	ldr	r3, [pc, #520]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df4:	4b7f      	ldr	r3, [pc, #508]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	497c      	ldr	r1, [pc, #496]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
 8002e08:	e018      	b.n	8002e3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e0a:	4b7a      	ldr	r3, [pc, #488]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a79      	ldr	r2, [pc, #484]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e16:	f7fe f9f1 	bl	80011fc <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7fe f9ed 	bl	80011fc <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e203      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e30:	4b70      	ldr	r3, [pc, #448]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d03c      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01c      	beq.n	8002e8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e50:	4b68      	ldr	r3, [pc, #416]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e56:	4a67      	ldr	r2, [pc, #412]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e60:	f7fe f9cc 	bl	80011fc <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e68:	f7fe f9c8 	bl	80011fc <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e1de      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e7a:	4b5e      	ldr	r3, [pc, #376]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0ef      	beq.n	8002e68 <HAL_RCC_OscConfig+0x3ec>
 8002e88:	e01b      	b.n	8002ec2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e8a:	4b5a      	ldr	r3, [pc, #360]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e90:	4a58      	ldr	r2, [pc, #352]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9a:	f7fe f9af 	bl	80011fc <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea2:	f7fe f9ab 	bl	80011fc <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e1c1      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eb4:	4b4f      	ldr	r3, [pc, #316]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1ef      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80a6 	beq.w	800301c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ed4:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10d      	bne.n	8002efc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee0:	4b44      	ldr	r3, [pc, #272]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	4a43      	ldr	r2, [pc, #268]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eea:	6593      	str	r3, [r2, #88]	; 0x58
 8002eec:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efc:	4b3e      	ldr	r3, [pc, #248]	; (8002ff8 <HAL_RCC_OscConfig+0x57c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d118      	bne.n	8002f3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f08:	4b3b      	ldr	r3, [pc, #236]	; (8002ff8 <HAL_RCC_OscConfig+0x57c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a3a      	ldr	r2, [pc, #232]	; (8002ff8 <HAL_RCC_OscConfig+0x57c>)
 8002f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f14:	f7fe f972 	bl	80011fc <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1c:	f7fe f96e 	bl	80011fc <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e184      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f2e:	4b32      	ldr	r3, [pc, #200]	; (8002ff8 <HAL_RCC_OscConfig+0x57c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d108      	bne.n	8002f54 <HAL_RCC_OscConfig+0x4d8>
 8002f42:	4b2c      	ldr	r3, [pc, #176]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f48:	4a2a      	ldr	r2, [pc, #168]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f52:	e024      	b.n	8002f9e <HAL_RCC_OscConfig+0x522>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d110      	bne.n	8002f7e <HAL_RCC_OscConfig+0x502>
 8002f5c:	4b25      	ldr	r3, [pc, #148]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f62:	4a24      	ldr	r2, [pc, #144]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f64:	f043 0304 	orr.w	r3, r3, #4
 8002f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f6c:	4b21      	ldr	r3, [pc, #132]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	4a20      	ldr	r2, [pc, #128]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f7c:	e00f      	b.n	8002f9e <HAL_RCC_OscConfig+0x522>
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f84:	4a1b      	ldr	r2, [pc, #108]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f8e:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	4a17      	ldr	r2, [pc, #92]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002f96:	f023 0304 	bic.w	r3, r3, #4
 8002f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d016      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa6:	f7fe f929 	bl	80011fc <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7fe f925 	bl	80011fc <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e139      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_OscConfig+0x578>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0ed      	beq.n	8002fae <HAL_RCC_OscConfig+0x532>
 8002fd2:	e01a      	b.n	800300a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7fe f912 	bl	80011fc <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fda:	e00f      	b.n	8002ffc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7fe f90e 	bl	80011fc <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d906      	bls.n	8002ffc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e122      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ffc:	4b90      	ldr	r3, [pc, #576]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1e8      	bne.n	8002fdc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800300a:	7ffb      	ldrb	r3, [r7, #31]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d105      	bne.n	800301c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003010:	4b8b      	ldr	r3, [pc, #556]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003014:	4a8a      	ldr	r2, [pc, #552]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 8108 	beq.w	8003236 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	2b02      	cmp	r3, #2
 800302c:	f040 80d0 	bne.w	80031d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003030:	4b83      	ldr	r3, [pc, #524]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f003 0203 	and.w	r2, r3, #3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	429a      	cmp	r2, r3
 8003042:	d130      	bne.n	80030a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	3b01      	subs	r3, #1
 8003050:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	429a      	cmp	r2, r3
 8003054:	d127      	bne.n	80030a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003060:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d11f      	bne.n	80030a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003070:	2a07      	cmp	r2, #7
 8003072:	bf14      	ite	ne
 8003074:	2201      	movne	r2, #1
 8003076:	2200      	moveq	r2, #0
 8003078:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800307a:	4293      	cmp	r3, r2
 800307c:	d113      	bne.n	80030a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003088:	085b      	lsrs	r3, r3, #1
 800308a:	3b01      	subs	r3, #1
 800308c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	3b01      	subs	r3, #1
 80030a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d06e      	beq.n	8003184 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2b0c      	cmp	r3, #12
 80030aa:	d069      	beq.n	8003180 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030ac:	4b64      	ldr	r3, [pc, #400]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d105      	bne.n	80030c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030b8:	4b61      	ldr	r3, [pc, #388]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0b7      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030c8:	4b5d      	ldr	r3, [pc, #372]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a5c      	ldr	r2, [pc, #368]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80030ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030d4:	f7fe f892 	bl	80011fc <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030dc:	f7fe f88e 	bl	80011fc <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0a4      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ee:	4b54      	ldr	r3, [pc, #336]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030fa:	4b51      	ldr	r3, [pc, #324]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	4b51      	ldr	r3, [pc, #324]	; (8003244 <HAL_RCC_OscConfig+0x7c8>)
 8003100:	4013      	ands	r3, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800310a:	3a01      	subs	r2, #1
 800310c:	0112      	lsls	r2, r2, #4
 800310e:	4311      	orrs	r1, r2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003114:	0212      	lsls	r2, r2, #8
 8003116:	4311      	orrs	r1, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800311c:	0852      	lsrs	r2, r2, #1
 800311e:	3a01      	subs	r2, #1
 8003120:	0552      	lsls	r2, r2, #21
 8003122:	4311      	orrs	r1, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003128:	0852      	lsrs	r2, r2, #1
 800312a:	3a01      	subs	r2, #1
 800312c:	0652      	lsls	r2, r2, #25
 800312e:	4311      	orrs	r1, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003134:	0912      	lsrs	r2, r2, #4
 8003136:	0452      	lsls	r2, r2, #17
 8003138:	430a      	orrs	r2, r1
 800313a:	4941      	ldr	r1, [pc, #260]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 800313c:	4313      	orrs	r3, r2
 800313e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003140:	4b3f      	ldr	r3, [pc, #252]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a3e      	ldr	r2, [pc, #248]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800314a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800314c:	4b3c      	ldr	r3, [pc, #240]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4a3b      	ldr	r2, [pc, #236]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003156:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003158:	f7fe f850 	bl	80011fc <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fe f84c 	bl	80011fc <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e062      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003172:	4b33      	ldr	r3, [pc, #204]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800317e:	e05a      	b.n	8003236 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e059      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003184:	4b2e      	ldr	r3, [pc, #184]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d152      	bne.n	8003236 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003190:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a2a      	ldr	r2, [pc, #168]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800319a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800319c:	4b28      	ldr	r3, [pc, #160]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a27      	ldr	r2, [pc, #156]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031a8:	f7fe f828 	bl	80011fc <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe f824 	bl	80011fc <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e03a      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c2:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x734>
 80031ce:	e032      	b.n	8003236 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2b0c      	cmp	r3, #12
 80031d4:	d02d      	beq.n	8003232 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a19      	ldr	r2, [pc, #100]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80031e2:	4b17      	ldr	r3, [pc, #92]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d105      	bne.n	80031fa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031ee:	4b14      	ldr	r3, [pc, #80]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	4a13      	ldr	r2, [pc, #76]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031f4:	f023 0303 	bic.w	r3, r3, #3
 80031f8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	4a10      	ldr	r2, [pc, #64]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003200:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003208:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320a:	f7fd fff7 	bl	80011fc <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003212:	f7fd fff3 	bl	80011fc <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e009      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_RCC_OscConfig+0x7c4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x796>
 8003230:	e001      	b.n	8003236 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3720      	adds	r7, #32
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40021000 	.word	0x40021000
 8003244:	f99d808c 	.word	0xf99d808c

08003248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0c8      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800325c:	4b66      	ldr	r3, [pc, #408]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d910      	bls.n	800328c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 0207 	bic.w	r2, r3, #7
 8003272:	4961      	ldr	r1, [pc, #388]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b5f      	ldr	r3, [pc, #380]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0b0      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d04c      	beq.n	8003332 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a0:	4b56      	ldr	r3, [pc, #344]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d121      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e09e      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b8:	4b50      	ldr	r3, [pc, #320]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d115      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e092      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032d0:	4b4a      	ldr	r3, [pc, #296]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d109      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e086      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e0:	4b46      	ldr	r3, [pc, #280]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e07e      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032f0:	4b42      	ldr	r3, [pc, #264]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f023 0203 	bic.w	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	493f      	ldr	r1, [pc, #252]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003302:	f7fd ff7b 	bl	80011fc <HAL_GetTick>
 8003306:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003308:	e00a      	b.n	8003320 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330a:	f7fd ff77 	bl	80011fc <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e066      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003320:	4b36      	ldr	r3, [pc, #216]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 020c 	and.w	r2, r3, #12
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	429a      	cmp	r2, r3
 8003330:	d1eb      	bne.n	800330a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800333e:	4b2f      	ldr	r3, [pc, #188]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	492c      	ldr	r1, [pc, #176]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 800334c:	4313      	orrs	r3, r2
 800334e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003350:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d210      	bcs.n	8003380 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 0207 	bic.w	r2, r3, #7
 8003366:	4924      	ldr	r1, [pc, #144]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <HAL_RCC_ClockConfig+0x1b0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e036      	b.n	80033ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800338c:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4918      	ldr	r1, [pc, #96]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d009      	beq.n	80033be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033aa:	4b14      	ldr	r3, [pc, #80]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4910      	ldr	r1, [pc, #64]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033be:	f000 f825 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80033c2:	4602      	mov	r2, r0
 80033c4:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <HAL_RCC_ClockConfig+0x1b4>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	490c      	ldr	r1, [pc, #48]	; (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	5ccb      	ldrb	r3, [r1, r3]
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	fa22 f303 	lsr.w	r3, r2, r3
 80033da:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033de:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd fb96 	bl	8000b14 <HAL_InitTick>
 80033e8:	4603      	mov	r3, r0
 80033ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80033ec:	7afb      	ldrb	r3, [r7, #11]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40021000 	.word	0x40021000
 8003400:	08006680 	.word	0x08006680
 8003404:	20000054 	.word	0x20000054
 8003408:	20000058 	.word	0x20000058

0800340c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	b089      	sub	sp, #36	; 0x24
 8003410:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	2300      	movs	r3, #0
 8003418:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800341a:	4b3e      	ldr	r3, [pc, #248]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003424:	4b3b      	ldr	r3, [pc, #236]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x34>
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d121      	bne.n	800347e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d11e      	bne.n	800347e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003440:	4b34      	ldr	r3, [pc, #208]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d107      	bne.n	800345c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800344c:	4b31      	ldr	r3, [pc, #196]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 800344e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	e005      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800345c:	4b2d      	ldr	r3, [pc, #180]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003468:	4a2b      	ldr	r2, [pc, #172]	; (8003518 <HAL_RCC_GetSysClockFreq+0x10c>)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003470:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10d      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800347c:	e00a      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b04      	cmp	r3, #4
 8003482:	d102      	bne.n	800348a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003484:	4b25      	ldr	r3, [pc, #148]	; (800351c <HAL_RCC_GetSysClockFreq+0x110>)
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	e004      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b08      	cmp	r3, #8
 800348e:	d101      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003490:	4b23      	ldr	r3, [pc, #140]	; (8003520 <HAL_RCC_GetSysClockFreq+0x114>)
 8003492:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b0c      	cmp	r3, #12
 8003498:	d134      	bne.n	8003504 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800349a:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d003      	beq.n	80034b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d003      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0xac>
 80034b0:	e005      	b.n	80034be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034b2:	4b1a      	ldr	r3, [pc, #104]	; (800351c <HAL_RCC_GetSysClockFreq+0x110>)
 80034b4:	617b      	str	r3, [r7, #20]
      break;
 80034b6:	e005      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034b8:	4b19      	ldr	r3, [pc, #100]	; (8003520 <HAL_RCC_GetSysClockFreq+0x114>)
 80034ba:	617b      	str	r3, [r7, #20]
      break;
 80034bc:	e002      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	617b      	str	r3, [r7, #20]
      break;
 80034c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	3301      	adds	r3, #1
 80034d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	0a1b      	lsrs	r3, r3, #8
 80034d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	fb02 f203 	mul.w	r2, r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034ea:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	0e5b      	lsrs	r3, r3, #25
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	3301      	adds	r3, #1
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003502:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003504:	69bb      	ldr	r3, [r7, #24]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3724      	adds	r7, #36	; 0x24
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	08006698 	.word	0x08006698
 800351c:	00f42400 	.word	0x00f42400
 8003520:	007a1200 	.word	0x007a1200

08003524 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003528:	4b03      	ldr	r3, [pc, #12]	; (8003538 <HAL_RCC_GetHCLKFreq+0x14>)
 800352a:	681b      	ldr	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	20000054 	.word	0x20000054

0800353c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003540:	f7ff fff0 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003544:	4602      	mov	r2, r0
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	4904      	ldr	r1, [pc, #16]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800355c:	4618      	mov	r0, r3
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021000 	.word	0x40021000
 8003564:	08006690 	.word	0x08006690

08003568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800356c:	f7ff ffda 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003570:	4602      	mov	r2, r0
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	0adb      	lsrs	r3, r3, #11
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	4904      	ldr	r1, [pc, #16]	; (8003590 <HAL_RCC_GetPCLK2Freq+0x28>)
 800357e:	5ccb      	ldrb	r3, [r1, r3]
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40021000 	.word	0x40021000
 8003590:	08006690 	.word	0x08006690

08003594 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	220f      	movs	r2, #15
 80035a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80035a4:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_RCC_GetClockConfig+0x5c>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0203 	and.w	r2, r3, #3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_RCC_GetClockConfig+0x5c>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80035bc:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <HAL_RCC_GetClockConfig+0x5c>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_GetClockConfig+0x5c>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	08db      	lsrs	r3, r3, #3
 80035ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80035d6:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <HAL_RCC_GetClockConfig+0x60>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0207 	and.w	r2, r3, #7
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	601a      	str	r2, [r3, #0]
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40022000 	.word	0x40022000

080035f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003600:	2300      	movs	r3, #0
 8003602:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003604:	4b2a      	ldr	r3, [pc, #168]	; (80036b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003610:	f7ff f9d0 	bl	80029b4 <HAL_PWREx_GetVoltageRange>
 8003614:	6178      	str	r0, [r7, #20]
 8003616:	e014      	b.n	8003642 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003618:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	4a24      	ldr	r2, [pc, #144]	; (80036b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003622:	6593      	str	r3, [r2, #88]	; 0x58
 8003624:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003630:	f7ff f9c0 	bl	80029b4 <HAL_PWREx_GetVoltageRange>
 8003634:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003636:	4b1e      	ldr	r3, [pc, #120]	; (80036b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363a:	4a1d      	ldr	r2, [pc, #116]	; (80036b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800363c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003640:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003648:	d10b      	bne.n	8003662 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b80      	cmp	r3, #128	; 0x80
 800364e:	d919      	bls.n	8003684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2ba0      	cmp	r3, #160	; 0xa0
 8003654:	d902      	bls.n	800365c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003656:	2302      	movs	r3, #2
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	e013      	b.n	8003684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800365c:	2301      	movs	r3, #1
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	e010      	b.n	8003684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b80      	cmp	r3, #128	; 0x80
 8003666:	d902      	bls.n	800366e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003668:	2303      	movs	r3, #3
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	e00a      	b.n	8003684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b80      	cmp	r3, #128	; 0x80
 8003672:	d102      	bne.n	800367a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003674:	2302      	movs	r3, #2
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	e004      	b.n	8003684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b70      	cmp	r3, #112	; 0x70
 800367e:	d101      	bne.n	8003684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003680:	2301      	movs	r3, #1
 8003682:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f023 0207 	bic.w	r2, r3, #7
 800368c:	4909      	ldr	r1, [pc, #36]	; (80036b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003694:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d001      	beq.n	80036a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40022000 	.word	0x40022000

080036b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036c0:	2300      	movs	r3, #0
 80036c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036c4:	2300      	movs	r3, #0
 80036c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d041      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036dc:	d02a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036e2:	d824      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036e8:	d008      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036ee:	d81e      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f8:	d010      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036fa:	e018      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036fc:	4b86      	ldr	r3, [pc, #536]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a85      	ldr	r2, [pc, #532]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003706:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003708:	e015      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3304      	adds	r3, #4
 800370e:	2100      	movs	r1, #0
 8003710:	4618      	mov	r0, r3
 8003712:	f000 fabb 	bl	8003c8c <RCCEx_PLLSAI1_Config>
 8003716:	4603      	mov	r3, r0
 8003718:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800371a:	e00c      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3320      	adds	r3, #32
 8003720:	2100      	movs	r1, #0
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fba6 	bl	8003e74 <RCCEx_PLLSAI2_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800372c:	e003      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	74fb      	strb	r3, [r7, #19]
      break;
 8003732:	e000      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003734:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003736:	7cfb      	ldrb	r3, [r7, #19]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10b      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800373c:	4b76      	ldr	r3, [pc, #472]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800374a:	4973      	ldr	r1, [pc, #460]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003752:	e001      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d041      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003768:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800376c:	d02a      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800376e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003772:	d824      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003778:	d008      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800377a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800377e:	d81e      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003788:	d010      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800378a:	e018      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800378c:	4b62      	ldr	r3, [pc, #392]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a61      	ldr	r2, [pc, #388]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003796:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003798:	e015      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3304      	adds	r3, #4
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fa73 	bl	8003c8c <RCCEx_PLLSAI1_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037aa:	e00c      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3320      	adds	r3, #32
 80037b0:	2100      	movs	r1, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fb5e 	bl	8003e74 <RCCEx_PLLSAI2_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037bc:	e003      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	74fb      	strb	r3, [r7, #19]
      break;
 80037c2:	e000      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037cc:	4b52      	ldr	r3, [pc, #328]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037da:	494f      	ldr	r1, [pc, #316]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037e2:	e001      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	7cfb      	ldrb	r3, [r7, #19]
 80037e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80a0 	beq.w	8003936 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f6:	2300      	movs	r3, #0
 80037f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037fa:	4b47      	ldr	r3, [pc, #284]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800380a:	2300      	movs	r3, #0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00d      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003810:	4b41      	ldr	r3, [pc, #260]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	4a40      	ldr	r2, [pc, #256]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381a:	6593      	str	r3, [r2, #88]	; 0x58
 800381c:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003828:	2301      	movs	r3, #1
 800382a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800382c:	4b3b      	ldr	r3, [pc, #236]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a3a      	ldr	r2, [pc, #232]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003836:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003838:	f7fd fce0 	bl	80011fc <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800383e:	e009      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003840:	f7fd fcdc 	bl	80011fc <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d902      	bls.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	74fb      	strb	r3, [r7, #19]
        break;
 8003852:	e005      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003854:	4b31      	ldr	r3, [pc, #196]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ef      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d15c      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003866:	4b2c      	ldr	r3, [pc, #176]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003870:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01f      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	429a      	cmp	r2, r3
 8003882:	d019      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003884:	4b24      	ldr	r3, [pc, #144]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003890:	4b21      	ldr	r3, [pc, #132]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	4a20      	ldr	r2, [pc, #128]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	4a1c      	ldr	r2, [pc, #112]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038b0:	4a19      	ldr	r2, [pc, #100]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d016      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7fd fc9b 	bl	80011fc <HAL_GetTick>
 80038c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c8:	e00b      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ca:	f7fd fc97 	bl	80011fc <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d8:	4293      	cmp	r3, r2
 80038da:	d902      	bls.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	74fb      	strb	r3, [r7, #19]
            break;
 80038e0:	e006      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e2:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0ec      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038f0:	7cfb      	ldrb	r3, [r7, #19]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10c      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038f6:	4b08      	ldr	r3, [pc, #32]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003906:	4904      	ldr	r1, [pc, #16]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800390e:	e009      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003910:	7cfb      	ldrb	r3, [r7, #19]
 8003912:	74bb      	strb	r3, [r7, #18]
 8003914:	e006      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003924:	7c7b      	ldrb	r3, [r7, #17]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d105      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800392a:	4b9e      	ldr	r3, [pc, #632]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	4a9d      	ldr	r2, [pc, #628]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003934:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003942:	4b98      	ldr	r3, [pc, #608]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f023 0203 	bic.w	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	4994      	ldr	r1, [pc, #592]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003964:	4b8f      	ldr	r3, [pc, #572]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f023 020c 	bic.w	r2, r3, #12
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	498c      	ldr	r1, [pc, #560]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003986:	4b87      	ldr	r3, [pc, #540]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	4983      	ldr	r1, [pc, #524]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039a8:	4b7e      	ldr	r3, [pc, #504]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	497b      	ldr	r1, [pc, #492]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039ca:	4b76      	ldr	r3, [pc, #472]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d8:	4972      	ldr	r1, [pc, #456]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039ec:	4b6d      	ldr	r3, [pc, #436]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fa:	496a      	ldr	r1, [pc, #424]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a0e:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	4961      	ldr	r1, [pc, #388]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a30:	4b5c      	ldr	r3, [pc, #368]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3e:	4959      	ldr	r1, [pc, #356]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a52:	4b54      	ldr	r3, [pc, #336]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a60:	4950      	ldr	r1, [pc, #320]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a74:	4b4b      	ldr	r3, [pc, #300]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a82:	4948      	ldr	r1, [pc, #288]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a96:	4b43      	ldr	r3, [pc, #268]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa4:	493f      	ldr	r1, [pc, #252]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d028      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ab8:	4b3a      	ldr	r3, [pc, #232]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac6:	4937      	ldr	r1, [pc, #220]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ad2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ad6:	d106      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad8:	4b32      	ldr	r3, [pc, #200]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	4a31      	ldr	r2, [pc, #196]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ae2:	60d3      	str	r3, [r2, #12]
 8003ae4:	e011      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aee:	d10c      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3304      	adds	r3, #4
 8003af4:	2101      	movs	r1, #1
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 f8c8 	bl	8003c8c <RCCEx_PLLSAI1_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b00:	7cfb      	ldrb	r3, [r7, #19]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b06:	7cfb      	ldrb	r3, [r7, #19]
 8003b08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d028      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b16:	4b23      	ldr	r3, [pc, #140]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	491f      	ldr	r1, [pc, #124]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b34:	d106      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b36:	4b1b      	ldr	r3, [pc, #108]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	4a1a      	ldr	r2, [pc, #104]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b40:	60d3      	str	r3, [r2, #12]
 8003b42:	e011      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3304      	adds	r3, #4
 8003b52:	2101      	movs	r1, #1
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 f899 	bl	8003c8c <RCCEx_PLLSAI1_Config>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b5e:	7cfb      	ldrb	r3, [r7, #19]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d02b      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b82:	4908      	ldr	r1, [pc, #32]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b92:	d109      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b94:	4b03      	ldr	r3, [pc, #12]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4a02      	ldr	r2, [pc, #8]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b9e:	60d3      	str	r3, [r2, #12]
 8003ba0:	e014      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ba2:	bf00      	nop
 8003ba4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bb0:	d10c      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 f867 	bl	8003c8c <RCCEx_PLLSAI1_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bc2:	7cfb      	ldrb	r3, [r7, #19]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d02f      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bd8:	4b2b      	ldr	r3, [pc, #172]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003be6:	4928      	ldr	r1, [pc, #160]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bf6:	d10d      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 f844 	bl	8003c8c <RCCEx_PLLSAI1_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d014      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	74bb      	strb	r3, [r7, #18]
 8003c12:	e011      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3320      	adds	r3, #32
 8003c22:	2102      	movs	r1, #2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f925 	bl	8003e74 <RCCEx_PLLSAI2_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c2e:	7cfb      	ldrb	r3, [r7, #19]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c44:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c52:	490d      	ldr	r1, [pc, #52]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00b      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c66:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c76:	4904      	ldr	r1, [pc, #16]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40021000 	.word	0x40021000

08003c8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c9a:	4b75      	ldr	r3, [pc, #468]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d018      	beq.n	8003cd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ca6:	4b72      	ldr	r3, [pc, #456]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0203 	and.w	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d10d      	bne.n	8003cd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
       ||
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cbe:	4b6c      	ldr	r3, [pc, #432]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
       ||
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d047      	beq.n	8003d62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	73fb      	strb	r3, [r7, #15]
 8003cd6:	e044      	b.n	8003d62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d018      	beq.n	8003d12 <RCCEx_PLLSAI1_Config+0x86>
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d825      	bhi.n	8003d30 <RCCEx_PLLSAI1_Config+0xa4>
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d002      	beq.n	8003cee <RCCEx_PLLSAI1_Config+0x62>
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d009      	beq.n	8003d00 <RCCEx_PLLSAI1_Config+0x74>
 8003cec:	e020      	b.n	8003d30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cee:	4b60      	ldr	r3, [pc, #384]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d11d      	bne.n	8003d36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cfe:	e01a      	b.n	8003d36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d00:	4b5b      	ldr	r3, [pc, #364]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d116      	bne.n	8003d3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d10:	e013      	b.n	8003d3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d12:	4b57      	ldr	r3, [pc, #348]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10f      	bne.n	8003d3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d1e:	4b54      	ldr	r3, [pc, #336]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d2e:	e006      	b.n	8003d3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
      break;
 8003d34:	e004      	b.n	8003d40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d36:	bf00      	nop
 8003d38:	e002      	b.n	8003d40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d46:	4b4a      	ldr	r3, [pc, #296]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6819      	ldr	r1, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	4944      	ldr	r1, [pc, #272]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d17d      	bne.n	8003e64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d68:	4b41      	ldr	r3, [pc, #260]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a40      	ldr	r2, [pc, #256]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d74:	f7fd fa42 	bl	80011fc <HAL_GetTick>
 8003d78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d7a:	e009      	b.n	8003d90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d7c:	f7fd fa3e 	bl	80011fc <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d902      	bls.n	8003d90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d8e:	e005      	b.n	8003d9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d90:	4b37      	ldr	r3, [pc, #220]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1ef      	bne.n	8003d7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d160      	bne.n	8003e64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d111      	bne.n	8003dcc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003da8:	4b31      	ldr	r3, [pc, #196]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6892      	ldr	r2, [r2, #8]
 8003db8:	0211      	lsls	r1, r2, #8
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68d2      	ldr	r2, [r2, #12]
 8003dbe:	0912      	lsrs	r2, r2, #4
 8003dc0:	0452      	lsls	r2, r2, #17
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	492a      	ldr	r1, [pc, #168]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	610b      	str	r3, [r1, #16]
 8003dca:	e027      	b.n	8003e1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d112      	bne.n	8003df8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dd2:	4b27      	ldr	r3, [pc, #156]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003dda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6892      	ldr	r2, [r2, #8]
 8003de2:	0211      	lsls	r1, r2, #8
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6912      	ldr	r2, [r2, #16]
 8003de8:	0852      	lsrs	r2, r2, #1
 8003dea:	3a01      	subs	r2, #1
 8003dec:	0552      	lsls	r2, r2, #21
 8003dee:	430a      	orrs	r2, r1
 8003df0:	491f      	ldr	r1, [pc, #124]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	610b      	str	r3, [r1, #16]
 8003df6:	e011      	b.n	8003e1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003df8:	4b1d      	ldr	r3, [pc, #116]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6892      	ldr	r2, [r2, #8]
 8003e08:	0211      	lsls	r1, r2, #8
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6952      	ldr	r2, [r2, #20]
 8003e0e:	0852      	lsrs	r2, r2, #1
 8003e10:	3a01      	subs	r2, #1
 8003e12:	0652      	lsls	r2, r2, #25
 8003e14:	430a      	orrs	r2, r1
 8003e16:	4916      	ldr	r1, [pc, #88]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e1c:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a13      	ldr	r2, [pc, #76]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fd f9e8 	bl	80011fc <HAL_GetTick>
 8003e2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e2e:	e009      	b.n	8003e44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e30:	f7fd f9e4 	bl	80011fc <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d902      	bls.n	8003e44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	73fb      	strb	r3, [r7, #15]
          break;
 8003e42:	e005      	b.n	8003e50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e44:	4b0a      	ldr	r3, [pc, #40]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ef      	beq.n	8003e30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e56:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	4904      	ldr	r1, [pc, #16]	; (8003e70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40021000 	.word	0x40021000

08003e74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e82:	4b6a      	ldr	r3, [pc, #424]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d018      	beq.n	8003ec0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e8e:	4b67      	ldr	r3, [pc, #412]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f003 0203 	and.w	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d10d      	bne.n	8003eba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ea6:	4b61      	ldr	r3, [pc, #388]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
       ||
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d047      	beq.n	8003f4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	73fb      	strb	r3, [r7, #15]
 8003ebe:	e044      	b.n	8003f4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d018      	beq.n	8003efa <RCCEx_PLLSAI2_Config+0x86>
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d825      	bhi.n	8003f18 <RCCEx_PLLSAI2_Config+0xa4>
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d002      	beq.n	8003ed6 <RCCEx_PLLSAI2_Config+0x62>
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d009      	beq.n	8003ee8 <RCCEx_PLLSAI2_Config+0x74>
 8003ed4:	e020      	b.n	8003f18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ed6:	4b55      	ldr	r3, [pc, #340]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d11d      	bne.n	8003f1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee6:	e01a      	b.n	8003f1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ee8:	4b50      	ldr	r3, [pc, #320]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d116      	bne.n	8003f22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef8:	e013      	b.n	8003f22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003efa:	4b4c      	ldr	r3, [pc, #304]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10f      	bne.n	8003f26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f06:	4b49      	ldr	r3, [pc, #292]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f16:	e006      	b.n	8003f26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f1c:	e004      	b.n	8003f28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f1e:	bf00      	nop
 8003f20:	e002      	b.n	8003f28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f22:	bf00      	nop
 8003f24:	e000      	b.n	8003f28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f26:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10d      	bne.n	8003f4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f2e:	4b3f      	ldr	r3, [pc, #252]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6819      	ldr	r1, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	430b      	orrs	r3, r1
 8003f44:	4939      	ldr	r1, [pc, #228]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d167      	bne.n	8004020 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f50:	4b36      	ldr	r3, [pc, #216]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a35      	ldr	r2, [pc, #212]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f5c:	f7fd f94e 	bl	80011fc <HAL_GetTick>
 8003f60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f62:	e009      	b.n	8003f78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f64:	f7fd f94a 	bl	80011fc <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d902      	bls.n	8003f78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	73fb      	strb	r3, [r7, #15]
        break;
 8003f76:	e005      	b.n	8003f84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f78:	4b2c      	ldr	r3, [pc, #176]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1ef      	bne.n	8003f64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d14a      	bne.n	8004020 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d111      	bne.n	8003fb4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f90:	4b26      	ldr	r3, [pc, #152]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6892      	ldr	r2, [r2, #8]
 8003fa0:	0211      	lsls	r1, r2, #8
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68d2      	ldr	r2, [r2, #12]
 8003fa6:	0912      	lsrs	r2, r2, #4
 8003fa8:	0452      	lsls	r2, r2, #17
 8003faa:	430a      	orrs	r2, r1
 8003fac:	491f      	ldr	r1, [pc, #124]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	614b      	str	r3, [r1, #20]
 8003fb2:	e011      	b.n	8003fd8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fb4:	4b1d      	ldr	r3, [pc, #116]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6892      	ldr	r2, [r2, #8]
 8003fc4:	0211      	lsls	r1, r2, #8
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6912      	ldr	r2, [r2, #16]
 8003fca:	0852      	lsrs	r2, r2, #1
 8003fcc:	3a01      	subs	r2, #1
 8003fce:	0652      	lsls	r2, r2, #25
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	4916      	ldr	r1, [pc, #88]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fd8:	4b14      	ldr	r3, [pc, #80]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a13      	ldr	r2, [pc, #76]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe4:	f7fd f90a 	bl	80011fc <HAL_GetTick>
 8003fe8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fea:	e009      	b.n	8004000 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fec:	f7fd f906 	bl	80011fc <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d902      	bls.n	8004000 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	73fb      	strb	r3, [r7, #15]
          break;
 8003ffe:	e005      	b.n	800400c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004000:	4b0a      	ldr	r3, [pc, #40]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0ef      	beq.n	8003fec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	4904      	ldr	r1, [pc, #16]	; (800402c <RCCEx_PLLSAI2_Config+0x1b8>)
 800401c:	4313      	orrs	r3, r2
 800401e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004020:	7bfb      	ldrb	r3, [r7, #15]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000

08004030 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d06c      	beq.n	800411c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fc fba6 	bl	80007a8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	22ca      	movs	r2, #202	; 0xca
 800406a:	625a      	str	r2, [r3, #36]	; 0x24
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2253      	movs	r2, #83	; 0x53
 8004072:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f87c 	bl	8004172 <RTC_EnterInitMode>
 800407a:	4603      	mov	r3, r0
 800407c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d14b      	bne.n	800411c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004096:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6899      	ldr	r1, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68d2      	ldr	r2, [r2, #12]
 80040be:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6919      	ldr	r1, [r3, #16]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	041a      	lsls	r2, r3, #16
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f87f 	bl	80041d8 <RTC_ExitInitMode>
 80040da:	4603      	mov	r3, r0
 80040dc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d11b      	bne.n	800411c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0203 	bic.w	r2, r2, #3
 80040f2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69da      	ldr	r2, [r3, #28]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	22ff      	movs	r2, #255	; 0xff
 8004112:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800413c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800413e:	f7fd f85d 	bl	80011fc <HAL_GetTick>
 8004142:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004144:	e009      	b.n	800415a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004146:	f7fd f859 	bl	80011fc <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004154:	d901      	bls.n	800415a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e007      	b.n	800416a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0ee      	beq.n	8004146 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	d120      	bne.n	80041ce <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f04f 32ff 	mov.w	r2, #4294967295
 8004194:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004196:	f7fd f831 	bl	80011fc <HAL_GetTick>
 800419a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800419c:	e00d      	b.n	80041ba <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800419e:	f7fd f82d 	bl	80011fc <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ac:	d905      	bls.n	80041ba <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2203      	movs	r2, #3
 80041b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d102      	bne.n	80041ce <RTC_EnterInitMode+0x5c>
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d1e7      	bne.n	800419e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80041e4:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <RTC_ExitInitMode+0x78>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	4a19      	ldr	r2, [pc, #100]	; (8004250 <RTC_ExitInitMode+0x78>)
 80041ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ee:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80041f0:	4b17      	ldr	r3, [pc, #92]	; (8004250 <RTC_ExitInitMode+0x78>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10c      	bne.n	8004216 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7ff ff92 	bl	8004126 <HAL_RTC_WaitForSynchro>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01e      	beq.n	8004246 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2203      	movs	r2, #3
 800420c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	73fb      	strb	r3, [r7, #15]
 8004214:	e017      	b.n	8004246 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004216:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <RTC_ExitInitMode+0x78>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	4a0d      	ldr	r2, [pc, #52]	; (8004250 <RTC_ExitInitMode+0x78>)
 800421c:	f023 0320 	bic.w	r3, r3, #32
 8004220:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff ff7f 	bl	8004126 <HAL_RTC_WaitForSynchro>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2203      	movs	r2, #3
 8004232:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800423a:	4b05      	ldr	r3, [pc, #20]	; (8004250 <RTC_ExitInitMode+0x78>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	4a04      	ldr	r2, [pc, #16]	; (8004250 <RTC_ExitInitMode+0x78>)
 8004240:	f043 0320 	orr.w	r3, r3, #32
 8004244:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004246:	7bfb      	ldrb	r3, [r7, #15]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40002800 	.word	0x40002800

08004254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e095      	b.n	8004392 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	2b00      	cmp	r3, #0
 800426c:	d108      	bne.n	8004280 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004276:	d009      	beq.n	800428c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	61da      	str	r2, [r3, #28]
 800427e:	e005      	b.n	800428c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fc fbae 	bl	8000a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042cc:	d902      	bls.n	80042d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	e002      	b.n	80042da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80042e2:	d007      	beq.n	80042f4 <HAL_SPI_Init+0xa0>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042ec:	d002      	beq.n	80042f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004336:	ea42 0103 	orr.w	r1, r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	0c1b      	lsrs	r3, r3, #16
 8004350:	f003 0204 	and.w	r2, r3, #4
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004370:	ea42 0103 	orr.w	r1, r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b088      	sub	sp, #32
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	603b      	str	r3, [r7, #0]
 80043a6:	4613      	mov	r3, r2
 80043a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_SPI_Transmit+0x22>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e158      	b.n	800466e <HAL_SPI_Transmit+0x2d4>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043c4:	f7fc ff1a 	bl	80011fc <HAL_GetTick>
 80043c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80043ca:	88fb      	ldrh	r3, [r7, #6]
 80043cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d002      	beq.n	80043e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80043da:	2302      	movs	r3, #2
 80043dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043de:	e13d      	b.n	800465c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <HAL_SPI_Transmit+0x52>
 80043e6:	88fb      	ldrh	r3, [r7, #6]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d102      	bne.n	80043f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043f0:	e134      	b.n	800465c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2203      	movs	r2, #3
 80043f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	88fa      	ldrh	r2, [r7, #6]
 800440a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	88fa      	ldrh	r2, [r7, #6]
 8004410:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800443c:	d10f      	bne.n	800445e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800444c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800445c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004468:	2b40      	cmp	r3, #64	; 0x40
 800446a:	d007      	beq.n	800447c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800447a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004484:	d94b      	bls.n	800451e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <HAL_SPI_Transmit+0xfa>
 800448e:	8afb      	ldrh	r3, [r7, #22]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d13e      	bne.n	8004512 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	881a      	ldrh	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	1c9a      	adds	r2, r3, #2
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044b8:	e02b      	b.n	8004512 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d112      	bne.n	80044ee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	881a      	ldrh	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	1c9a      	adds	r2, r3, #2
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044ec:	e011      	b.n	8004512 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ee:	f7fc fe85 	bl	80011fc <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d803      	bhi.n	8004506 <HAL_SPI_Transmit+0x16c>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004504:	d102      	bne.n	800450c <HAL_SPI_Transmit+0x172>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d102      	bne.n	8004512 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004510:	e0a4      	b.n	800465c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1ce      	bne.n	80044ba <HAL_SPI_Transmit+0x120>
 800451c:	e07c      	b.n	8004618 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <HAL_SPI_Transmit+0x192>
 8004526:	8afb      	ldrh	r3, [r7, #22]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d170      	bne.n	800460e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b01      	cmp	r3, #1
 8004534:	d912      	bls.n	800455c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	881a      	ldrh	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	1c9a      	adds	r2, r3, #2
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b02      	subs	r3, #2
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	87da      	strh	r2, [r3, #62]	; 0x3e
 800455a:	e058      	b.n	800460e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	7812      	ldrb	r2, [r2, #0]
 8004568:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004582:	e044      	b.n	800460e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b02      	cmp	r3, #2
 8004590:	d12b      	bne.n	80045ea <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b01      	cmp	r3, #1
 800459a:	d912      	bls.n	80045c2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	881a      	ldrh	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ac:	1c9a      	adds	r2, r3, #2
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b02      	subs	r3, #2
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045c0:	e025      	b.n	800460e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	330c      	adds	r3, #12
 80045cc:	7812      	ldrb	r2, [r2, #0]
 80045ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045e8:	e011      	b.n	800460e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ea:	f7fc fe07 	bl	80011fc <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d803      	bhi.n	8004602 <HAL_SPI_Transmit+0x268>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d102      	bne.n	8004608 <HAL_SPI_Transmit+0x26e>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d102      	bne.n	800460e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800460c:	e026      	b.n	800465c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1b5      	bne.n	8004584 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	6839      	ldr	r1, [r7, #0]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f945 	bl	80048ac <SPI_EndRxTxTransaction>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2220      	movs	r2, #32
 800462c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10a      	bne.n	800464c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	77fb      	strb	r3, [r7, #31]
 8004658:	e000      	b.n	800465c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800465a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800466c:	7ffb      	ldrb	r3, [r7, #31]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3720      	adds	r7, #32
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	4613      	mov	r3, r2
 8004686:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004688:	f7fc fdb8 	bl	80011fc <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	4413      	add	r3, r2
 8004696:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004698:	f7fc fdb0 	bl	80011fc <HAL_GetTick>
 800469c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800469e:	4b39      	ldr	r3, [pc, #228]	; (8004784 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	015b      	lsls	r3, r3, #5
 80046a4:	0d1b      	lsrs	r3, r3, #20
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	fb02 f303 	mul.w	r3, r2, r3
 80046ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ae:	e054      	b.n	800475a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b6:	d050      	beq.n	800475a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046b8:	f7fc fda0 	bl	80011fc <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d902      	bls.n	80046ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d13d      	bne.n	800474a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046e6:	d111      	bne.n	800470c <SPI_WaitFlagStateUntilTimeout+0x94>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046f0:	d004      	beq.n	80046fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fa:	d107      	bne.n	800470c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800470a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004714:	d10f      	bne.n	8004736 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004734:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e017      	b.n	800477a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	3b01      	subs	r3, #1
 8004758:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4013      	ands	r3, r2
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	429a      	cmp	r2, r3
 8004768:	bf0c      	ite	eq
 800476a:	2301      	moveq	r3, #1
 800476c:	2300      	movne	r3, #0
 800476e:	b2db      	uxtb	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	79fb      	ldrb	r3, [r7, #7]
 8004774:	429a      	cmp	r2, r3
 8004776:	d19b      	bne.n	80046b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3720      	adds	r7, #32
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000054 	.word	0x20000054

08004788 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004796:	f7fc fd31 	bl	80011fc <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	1a9b      	subs	r3, r3, r2
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	4413      	add	r3, r2
 80047a4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047a6:	f7fc fd29 	bl	80011fc <HAL_GetTick>
 80047aa:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80047ac:	4b3e      	ldr	r3, [pc, #248]	; (80048a8 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	00da      	lsls	r2, r3, #3
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	0d1b      	lsrs	r3, r3, #20
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	fb02 f303 	mul.w	r3, r2, r3
 80047c2:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80047c4:	e062      	b.n	800488c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047cc:	d109      	bne.n	80047e2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d106      	bne.n	80047e2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	330c      	adds	r3, #12
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80047e0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d050      	beq.n	800488c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047ea:	f7fc fd07 	bl	80011fc <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d902      	bls.n	8004800 <SPI_WaitFifoStateUntilTimeout+0x78>
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d13d      	bne.n	800487c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800480e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004818:	d111      	bne.n	800483e <SPI_WaitFifoStateUntilTimeout+0xb6>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004822:	d004      	beq.n	800482e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482c:	d107      	bne.n	800483e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800483c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004846:	d10f      	bne.n	8004868 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004866:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e010      	b.n	800489e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	3b01      	subs	r3, #1
 800488a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	4013      	ands	r3, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	429a      	cmp	r2, r3
 800489a:	d194      	bne.n	80047c6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3720      	adds	r7, #32
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000054 	.word	0x20000054

080048ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2200      	movs	r2, #0
 80048c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f7ff ff5f 	bl	8004788 <SPI_WaitFifoStateUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d007      	beq.n	80048e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d4:	f043 0220 	orr.w	r2, r3, #32
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e027      	b.n	8004930 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2200      	movs	r2, #0
 80048e8:	2180      	movs	r1, #128	; 0x80
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f7ff fec4 	bl	8004678 <SPI_WaitFlagStateUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d007      	beq.n	8004906 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fa:	f043 0220 	orr.w	r2, r3, #32
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e014      	b.n	8004930 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2200      	movs	r2, #0
 800490e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f7ff ff38 	bl	8004788 <SPI_WaitFifoStateUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004922:	f043 0220 	orr.w	r2, r3, #32
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e000      	b.n	8004930 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e049      	b.n	80049de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fc fa14 	bl	8000d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3304      	adds	r3, #4
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f000 fd2c 	bl	80053d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d001      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e04f      	b.n	8004aa0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a23      	ldr	r2, [pc, #140]	; (8004aac <HAL_TIM_Base_Start_IT+0xc4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d01d      	beq.n	8004a5e <HAL_TIM_Base_Start_IT+0x76>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2a:	d018      	beq.n	8004a5e <HAL_TIM_Base_Start_IT+0x76>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1f      	ldr	r2, [pc, #124]	; (8004ab0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d013      	beq.n	8004a5e <HAL_TIM_Base_Start_IT+0x76>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a1e      	ldr	r2, [pc, #120]	; (8004ab4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00e      	beq.n	8004a5e <HAL_TIM_Base_Start_IT+0x76>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1c      	ldr	r2, [pc, #112]	; (8004ab8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d009      	beq.n	8004a5e <HAL_TIM_Base_Start_IT+0x76>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1b      	ldr	r2, [pc, #108]	; (8004abc <HAL_TIM_Base_Start_IT+0xd4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d004      	beq.n	8004a5e <HAL_TIM_Base_Start_IT+0x76>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a19      	ldr	r2, [pc, #100]	; (8004ac0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d115      	bne.n	8004a8a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	4b17      	ldr	r3, [pc, #92]	; (8004ac4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b06      	cmp	r3, #6
 8004a6e:	d015      	beq.n	8004a9c <HAL_TIM_Base_Start_IT+0xb4>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a76:	d011      	beq.n	8004a9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a88:	e008      	b.n	8004a9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0201 	orr.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	e000      	b.n	8004a9e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	40012c00 	.word	0x40012c00
 8004ab0:	40000400 	.word	0x40000400
 8004ab4:	40000800 	.word	0x40000800
 8004ab8:	40000c00 	.word	0x40000c00
 8004abc:	40013400 	.word	0x40013400
 8004ac0:	40014000 	.word	0x40014000
 8004ac4:	00010007 	.word	0x00010007

08004ac8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e049      	b.n	8004b6e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f841 	bl	8004b76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	4619      	mov	r1, r3
 8004b06:	4610      	mov	r0, r2
 8004b08:	f000 fc64 	bl	80053d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d109      	bne.n	8004bb0 <HAL_TIM_PWM_Start+0x24>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	bf14      	ite	ne
 8004ba8:	2301      	movne	r3, #1
 8004baa:	2300      	moveq	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	e03c      	b.n	8004c2a <HAL_TIM_PWM_Start+0x9e>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d109      	bne.n	8004bca <HAL_TIM_PWM_Start+0x3e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	bf14      	ite	ne
 8004bc2:	2301      	movne	r3, #1
 8004bc4:	2300      	moveq	r3, #0
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	e02f      	b.n	8004c2a <HAL_TIM_PWM_Start+0x9e>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d109      	bne.n	8004be4 <HAL_TIM_PWM_Start+0x58>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	bf14      	ite	ne
 8004bdc:	2301      	movne	r3, #1
 8004bde:	2300      	moveq	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	e022      	b.n	8004c2a <HAL_TIM_PWM_Start+0x9e>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b0c      	cmp	r3, #12
 8004be8:	d109      	bne.n	8004bfe <HAL_TIM_PWM_Start+0x72>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	bf14      	ite	ne
 8004bf6:	2301      	movne	r3, #1
 8004bf8:	2300      	moveq	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	e015      	b.n	8004c2a <HAL_TIM_PWM_Start+0x9e>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d109      	bne.n	8004c18 <HAL_TIM_PWM_Start+0x8c>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	bf14      	ite	ne
 8004c10:	2301      	movne	r3, #1
 8004c12:	2300      	moveq	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	e008      	b.n	8004c2a <HAL_TIM_PWM_Start+0x9e>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	bf14      	ite	ne
 8004c24:	2301      	movne	r3, #1
 8004c26:	2300      	moveq	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e09c      	b.n	8004d6c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d104      	bne.n	8004c42 <HAL_TIM_PWM_Start+0xb6>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c40:	e023      	b.n	8004c8a <HAL_TIM_PWM_Start+0xfe>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d104      	bne.n	8004c52 <HAL_TIM_PWM_Start+0xc6>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c50:	e01b      	b.n	8004c8a <HAL_TIM_PWM_Start+0xfe>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d104      	bne.n	8004c62 <HAL_TIM_PWM_Start+0xd6>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c60:	e013      	b.n	8004c8a <HAL_TIM_PWM_Start+0xfe>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b0c      	cmp	r3, #12
 8004c66:	d104      	bne.n	8004c72 <HAL_TIM_PWM_Start+0xe6>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c70:	e00b      	b.n	8004c8a <HAL_TIM_PWM_Start+0xfe>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b10      	cmp	r3, #16
 8004c76:	d104      	bne.n	8004c82 <HAL_TIM_PWM_Start+0xf6>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c80:	e003      	b.n	8004c8a <HAL_TIM_PWM_Start+0xfe>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2202      	movs	r2, #2
 8004c86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	6839      	ldr	r1, [r7, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 ffa8 	bl	8005be8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a35      	ldr	r2, [pc, #212]	; (8004d74 <HAL_TIM_PWM_Start+0x1e8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d013      	beq.n	8004cca <HAL_TIM_PWM_Start+0x13e>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a34      	ldr	r2, [pc, #208]	; (8004d78 <HAL_TIM_PWM_Start+0x1ec>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00e      	beq.n	8004cca <HAL_TIM_PWM_Start+0x13e>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a32      	ldr	r2, [pc, #200]	; (8004d7c <HAL_TIM_PWM_Start+0x1f0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d009      	beq.n	8004cca <HAL_TIM_PWM_Start+0x13e>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a31      	ldr	r2, [pc, #196]	; (8004d80 <HAL_TIM_PWM_Start+0x1f4>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d004      	beq.n	8004cca <HAL_TIM_PWM_Start+0x13e>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a2f      	ldr	r2, [pc, #188]	; (8004d84 <HAL_TIM_PWM_Start+0x1f8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d101      	bne.n	8004cce <HAL_TIM_PWM_Start+0x142>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <HAL_TIM_PWM_Start+0x144>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ce2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a22      	ldr	r2, [pc, #136]	; (8004d74 <HAL_TIM_PWM_Start+0x1e8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d01d      	beq.n	8004d2a <HAL_TIM_PWM_Start+0x19e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf6:	d018      	beq.n	8004d2a <HAL_TIM_PWM_Start+0x19e>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a22      	ldr	r2, [pc, #136]	; (8004d88 <HAL_TIM_PWM_Start+0x1fc>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d013      	beq.n	8004d2a <HAL_TIM_PWM_Start+0x19e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a21      	ldr	r2, [pc, #132]	; (8004d8c <HAL_TIM_PWM_Start+0x200>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00e      	beq.n	8004d2a <HAL_TIM_PWM_Start+0x19e>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1f      	ldr	r2, [pc, #124]	; (8004d90 <HAL_TIM_PWM_Start+0x204>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d009      	beq.n	8004d2a <HAL_TIM_PWM_Start+0x19e>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a17      	ldr	r2, [pc, #92]	; (8004d78 <HAL_TIM_PWM_Start+0x1ec>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d004      	beq.n	8004d2a <HAL_TIM_PWM_Start+0x19e>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a15      	ldr	r2, [pc, #84]	; (8004d7c <HAL_TIM_PWM_Start+0x1f0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d115      	bne.n	8004d56 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	4b18      	ldr	r3, [pc, #96]	; (8004d94 <HAL_TIM_PWM_Start+0x208>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b06      	cmp	r3, #6
 8004d3a:	d015      	beq.n	8004d68 <HAL_TIM_PWM_Start+0x1dc>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d42:	d011      	beq.n	8004d68 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d54:	e008      	b.n	8004d68 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0201 	orr.w	r2, r2, #1
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e000      	b.n	8004d6a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	40013400 	.word	0x40013400
 8004d7c:	40014000 	.word	0x40014000
 8004d80:	40014400 	.word	0x40014400
 8004d84:	40014800 	.word	0x40014800
 8004d88:	40000400 	.word	0x40000400
 8004d8c:	40000800 	.word	0x40000800
 8004d90:	40000c00 	.word	0x40000c00
 8004d94:	00010007 	.word	0x00010007

08004d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d122      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d11b      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0202 	mvn.w	r2, #2
 8004dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fadc 	bl	8005398 <HAL_TIM_IC_CaptureCallback>
 8004de0:	e005      	b.n	8004dee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 face 	bl	8005384 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fadf 	bl	80053ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d122      	bne.n	8004e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d11b      	bne.n	8004e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0204 	mvn.w	r2, #4
 8004e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fab2 	bl	8005398 <HAL_TIM_IC_CaptureCallback>
 8004e34:	e005      	b.n	8004e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 faa4 	bl	8005384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fab5 	bl	80053ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d122      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d11b      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0208 	mvn.w	r2, #8
 8004e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2204      	movs	r2, #4
 8004e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fa88 	bl	8005398 <HAL_TIM_IC_CaptureCallback>
 8004e88:	e005      	b.n	8004e96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fa7a 	bl	8005384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fa8b 	bl	80053ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b10      	cmp	r3, #16
 8004ea8:	d122      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d11b      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0210 	mvn.w	r2, #16
 8004ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2208      	movs	r2, #8
 8004ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fa5e 	bl	8005398 <HAL_TIM_IC_CaptureCallback>
 8004edc:	e005      	b.n	8004eea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fa50 	bl	8005384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fa61 	bl	80053ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d10e      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d107      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0201 	mvn.w	r2, #1
 8004f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fc f86e 	bl	8000ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f26:	2b80      	cmp	r3, #128	; 0x80
 8004f28:	d10e      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f34:	2b80      	cmp	r3, #128	; 0x80
 8004f36:	d107      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 ff08 	bl	8005d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f56:	d10e      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f62:	2b80      	cmp	r3, #128	; 0x80
 8004f64:	d107      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fefb 	bl	8005d6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f80:	2b40      	cmp	r3, #64	; 0x40
 8004f82:	d10e      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	d107      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 fa0f 	bl	80053c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d10e      	bne.n	8004fce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d107      	bne.n	8004fce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f06f 0220 	mvn.w	r2, #32
 8004fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 febb 	bl	8005d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d101      	bne.n	8004ff2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e0fd      	b.n	80051ee <HAL_TIM_PWM_ConfigChannel+0x216>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b14      	cmp	r3, #20
 8004ffe:	f200 80f0 	bhi.w	80051e2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	0800505d 	.word	0x0800505d
 800500c:	080051e3 	.word	0x080051e3
 8005010:	080051e3 	.word	0x080051e3
 8005014:	080051e3 	.word	0x080051e3
 8005018:	0800509d 	.word	0x0800509d
 800501c:	080051e3 	.word	0x080051e3
 8005020:	080051e3 	.word	0x080051e3
 8005024:	080051e3 	.word	0x080051e3
 8005028:	080050df 	.word	0x080050df
 800502c:	080051e3 	.word	0x080051e3
 8005030:	080051e3 	.word	0x080051e3
 8005034:	080051e3 	.word	0x080051e3
 8005038:	0800511f 	.word	0x0800511f
 800503c:	080051e3 	.word	0x080051e3
 8005040:	080051e3 	.word	0x080051e3
 8005044:	080051e3 	.word	0x080051e3
 8005048:	08005161 	.word	0x08005161
 800504c:	080051e3 	.word	0x080051e3
 8005050:	080051e3 	.word	0x080051e3
 8005054:	080051e3 	.word	0x080051e3
 8005058:	080051a1 	.word	0x080051a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68b9      	ldr	r1, [r7, #8]
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fa50 	bl	8005508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699a      	ldr	r2, [r3, #24]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0208 	orr.w	r2, r2, #8
 8005076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0204 	bic.w	r2, r2, #4
 8005086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6999      	ldr	r1, [r3, #24]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	619a      	str	r2, [r3, #24]
      break;
 800509a:	e0a3      	b.n	80051e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fac0 	bl	8005628 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6999      	ldr	r1, [r3, #24]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	021a      	lsls	r2, r3, #8
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	619a      	str	r2, [r3, #24]
      break;
 80050dc:	e082      	b.n	80051e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 fb29 	bl	800573c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69da      	ldr	r2, [r3, #28]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 0208 	orr.w	r2, r2, #8
 80050f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0204 	bic.w	r2, r2, #4
 8005108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69d9      	ldr	r1, [r3, #28]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	61da      	str	r2, [r3, #28]
      break;
 800511c:	e062      	b.n	80051e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fb91 	bl	800584c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69da      	ldr	r2, [r3, #28]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69d9      	ldr	r1, [r3, #28]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	021a      	lsls	r2, r3, #8
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	61da      	str	r2, [r3, #28]
      break;
 800515e:	e041      	b.n	80051e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fbda 	bl	8005920 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0208 	orr.w	r2, r2, #8
 800517a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0204 	bic.w	r2, r2, #4
 800518a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800519e:	e021      	b.n	80051e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fc1e 	bl	80059e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	021a      	lsls	r2, r3, #8
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051e0:	e000      	b.n	80051e4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80051e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop

080051f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_TIM_ConfigClockSource+0x18>
 800520c:	2302      	movs	r3, #2
 800520e:	e0b5      	b.n	800537c <HAL_TIM_ConfigClockSource+0x184>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800522e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005232:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800523a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800524c:	d03e      	beq.n	80052cc <HAL_TIM_ConfigClockSource+0xd4>
 800524e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005252:	f200 8087 	bhi.w	8005364 <HAL_TIM_ConfigClockSource+0x16c>
 8005256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525a:	f000 8085 	beq.w	8005368 <HAL_TIM_ConfigClockSource+0x170>
 800525e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005262:	d87f      	bhi.n	8005364 <HAL_TIM_ConfigClockSource+0x16c>
 8005264:	2b70      	cmp	r3, #112	; 0x70
 8005266:	d01a      	beq.n	800529e <HAL_TIM_ConfigClockSource+0xa6>
 8005268:	2b70      	cmp	r3, #112	; 0x70
 800526a:	d87b      	bhi.n	8005364 <HAL_TIM_ConfigClockSource+0x16c>
 800526c:	2b60      	cmp	r3, #96	; 0x60
 800526e:	d050      	beq.n	8005312 <HAL_TIM_ConfigClockSource+0x11a>
 8005270:	2b60      	cmp	r3, #96	; 0x60
 8005272:	d877      	bhi.n	8005364 <HAL_TIM_ConfigClockSource+0x16c>
 8005274:	2b50      	cmp	r3, #80	; 0x50
 8005276:	d03c      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0xfa>
 8005278:	2b50      	cmp	r3, #80	; 0x50
 800527a:	d873      	bhi.n	8005364 <HAL_TIM_ConfigClockSource+0x16c>
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d058      	beq.n	8005332 <HAL_TIM_ConfigClockSource+0x13a>
 8005280:	2b40      	cmp	r3, #64	; 0x40
 8005282:	d86f      	bhi.n	8005364 <HAL_TIM_ConfigClockSource+0x16c>
 8005284:	2b30      	cmp	r3, #48	; 0x30
 8005286:	d064      	beq.n	8005352 <HAL_TIM_ConfigClockSource+0x15a>
 8005288:	2b30      	cmp	r3, #48	; 0x30
 800528a:	d86b      	bhi.n	8005364 <HAL_TIM_ConfigClockSource+0x16c>
 800528c:	2b20      	cmp	r3, #32
 800528e:	d060      	beq.n	8005352 <HAL_TIM_ConfigClockSource+0x15a>
 8005290:	2b20      	cmp	r3, #32
 8005292:	d867      	bhi.n	8005364 <HAL_TIM_ConfigClockSource+0x16c>
 8005294:	2b00      	cmp	r3, #0
 8005296:	d05c      	beq.n	8005352 <HAL_TIM_ConfigClockSource+0x15a>
 8005298:	2b10      	cmp	r3, #16
 800529a:	d05a      	beq.n	8005352 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800529c:	e062      	b.n	8005364 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	6899      	ldr	r1, [r3, #8]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f000 fc7b 	bl	8005ba8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	609a      	str	r2, [r3, #8]
      break;
 80052ca:	e04e      	b.n	800536a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	6899      	ldr	r1, [r3, #8]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f000 fc64 	bl	8005ba8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ee:	609a      	str	r2, [r3, #8]
      break;
 80052f0:	e03b      	b.n	800536a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6818      	ldr	r0, [r3, #0]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	6859      	ldr	r1, [r3, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	461a      	mov	r2, r3
 8005300:	f000 fbd8 	bl	8005ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2150      	movs	r1, #80	; 0x50
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fc31 	bl	8005b72 <TIM_ITRx_SetConfig>
      break;
 8005310:	e02b      	b.n	800536a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6818      	ldr	r0, [r3, #0]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6859      	ldr	r1, [r3, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	461a      	mov	r2, r3
 8005320:	f000 fbf7 	bl	8005b12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2160      	movs	r1, #96	; 0x60
 800532a:	4618      	mov	r0, r3
 800532c:	f000 fc21 	bl	8005b72 <TIM_ITRx_SetConfig>
      break;
 8005330:	e01b      	b.n	800536a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6818      	ldr	r0, [r3, #0]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	6859      	ldr	r1, [r3, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	461a      	mov	r2, r3
 8005340:	f000 fbb8 	bl	8005ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2140      	movs	r1, #64	; 0x40
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fc11 	bl	8005b72 <TIM_ITRx_SetConfig>
      break;
 8005350:	e00b      	b.n	800536a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4619      	mov	r1, r3
 800535c:	4610      	mov	r0, r2
 800535e:	f000 fc08 	bl	8005b72 <TIM_ITRx_SetConfig>
        break;
 8005362:	e002      	b.n	800536a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005364:	bf00      	nop
 8005366:	e000      	b.n	800536a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005368:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a40      	ldr	r2, [pc, #256]	; (80054e8 <TIM_Base_SetConfig+0x114>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d013      	beq.n	8005414 <TIM_Base_SetConfig+0x40>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f2:	d00f      	beq.n	8005414 <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a3d      	ldr	r2, [pc, #244]	; (80054ec <TIM_Base_SetConfig+0x118>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00b      	beq.n	8005414 <TIM_Base_SetConfig+0x40>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a3c      	ldr	r2, [pc, #240]	; (80054f0 <TIM_Base_SetConfig+0x11c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d007      	beq.n	8005414 <TIM_Base_SetConfig+0x40>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a3b      	ldr	r2, [pc, #236]	; (80054f4 <TIM_Base_SetConfig+0x120>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d003      	beq.n	8005414 <TIM_Base_SetConfig+0x40>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a3a      	ldr	r2, [pc, #232]	; (80054f8 <TIM_Base_SetConfig+0x124>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d108      	bne.n	8005426 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a2f      	ldr	r2, [pc, #188]	; (80054e8 <TIM_Base_SetConfig+0x114>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d01f      	beq.n	800546e <TIM_Base_SetConfig+0x9a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005434:	d01b      	beq.n	800546e <TIM_Base_SetConfig+0x9a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a2c      	ldr	r2, [pc, #176]	; (80054ec <TIM_Base_SetConfig+0x118>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d017      	beq.n	800546e <TIM_Base_SetConfig+0x9a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a2b      	ldr	r2, [pc, #172]	; (80054f0 <TIM_Base_SetConfig+0x11c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d013      	beq.n	800546e <TIM_Base_SetConfig+0x9a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a2a      	ldr	r2, [pc, #168]	; (80054f4 <TIM_Base_SetConfig+0x120>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00f      	beq.n	800546e <TIM_Base_SetConfig+0x9a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a29      	ldr	r2, [pc, #164]	; (80054f8 <TIM_Base_SetConfig+0x124>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00b      	beq.n	800546e <TIM_Base_SetConfig+0x9a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a28      	ldr	r2, [pc, #160]	; (80054fc <TIM_Base_SetConfig+0x128>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d007      	beq.n	800546e <TIM_Base_SetConfig+0x9a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a27      	ldr	r2, [pc, #156]	; (8005500 <TIM_Base_SetConfig+0x12c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d003      	beq.n	800546e <TIM_Base_SetConfig+0x9a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a26      	ldr	r2, [pc, #152]	; (8005504 <TIM_Base_SetConfig+0x130>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d108      	bne.n	8005480 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a10      	ldr	r2, [pc, #64]	; (80054e8 <TIM_Base_SetConfig+0x114>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00f      	beq.n	80054cc <TIM_Base_SetConfig+0xf8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a12      	ldr	r2, [pc, #72]	; (80054f8 <TIM_Base_SetConfig+0x124>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00b      	beq.n	80054cc <TIM_Base_SetConfig+0xf8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a11      	ldr	r2, [pc, #68]	; (80054fc <TIM_Base_SetConfig+0x128>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d007      	beq.n	80054cc <TIM_Base_SetConfig+0xf8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a10      	ldr	r2, [pc, #64]	; (8005500 <TIM_Base_SetConfig+0x12c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d003      	beq.n	80054cc <TIM_Base_SetConfig+0xf8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a0f      	ldr	r2, [pc, #60]	; (8005504 <TIM_Base_SetConfig+0x130>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d103      	bne.n	80054d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	691a      	ldr	r2, [r3, #16]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	615a      	str	r2, [r3, #20]
}
 80054da:	bf00      	nop
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40012c00 	.word	0x40012c00
 80054ec:	40000400 	.word	0x40000400
 80054f0:	40000800 	.word	0x40000800
 80054f4:	40000c00 	.word	0x40000c00
 80054f8:	40013400 	.word	0x40013400
 80054fc:	40014000 	.word	0x40014000
 8005500:	40014400 	.word	0x40014400
 8005504:	40014800 	.word	0x40014800

08005508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	f023 0201 	bic.w	r2, r3, #1
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0303 	bic.w	r3, r3, #3
 8005542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f023 0302 	bic.w	r3, r3, #2
 8005554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4313      	orrs	r3, r2
 800555e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a2c      	ldr	r2, [pc, #176]	; (8005614 <TIM_OC1_SetConfig+0x10c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00f      	beq.n	8005588 <TIM_OC1_SetConfig+0x80>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a2b      	ldr	r2, [pc, #172]	; (8005618 <TIM_OC1_SetConfig+0x110>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00b      	beq.n	8005588 <TIM_OC1_SetConfig+0x80>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a2a      	ldr	r2, [pc, #168]	; (800561c <TIM_OC1_SetConfig+0x114>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d007      	beq.n	8005588 <TIM_OC1_SetConfig+0x80>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a29      	ldr	r2, [pc, #164]	; (8005620 <TIM_OC1_SetConfig+0x118>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_OC1_SetConfig+0x80>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a28      	ldr	r2, [pc, #160]	; (8005624 <TIM_OC1_SetConfig+0x11c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d10c      	bne.n	80055a2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f023 0308 	bic.w	r3, r3, #8
 800558e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f023 0304 	bic.w	r3, r3, #4
 80055a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a1b      	ldr	r2, [pc, #108]	; (8005614 <TIM_OC1_SetConfig+0x10c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00f      	beq.n	80055ca <TIM_OC1_SetConfig+0xc2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a1a      	ldr	r2, [pc, #104]	; (8005618 <TIM_OC1_SetConfig+0x110>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00b      	beq.n	80055ca <TIM_OC1_SetConfig+0xc2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a19      	ldr	r2, [pc, #100]	; (800561c <TIM_OC1_SetConfig+0x114>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d007      	beq.n	80055ca <TIM_OC1_SetConfig+0xc2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a18      	ldr	r2, [pc, #96]	; (8005620 <TIM_OC1_SetConfig+0x118>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d003      	beq.n	80055ca <TIM_OC1_SetConfig+0xc2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a17      	ldr	r2, [pc, #92]	; (8005624 <TIM_OC1_SetConfig+0x11c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d111      	bne.n	80055ee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	621a      	str	r2, [r3, #32]
}
 8005608:	bf00      	nop
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	40012c00 	.word	0x40012c00
 8005618:	40013400 	.word	0x40013400
 800561c:	40014000 	.word	0x40014000
 8005620:	40014400 	.word	0x40014400
 8005624:	40014800 	.word	0x40014800

08005628 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	f023 0210 	bic.w	r2, r3, #16
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800565a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	021b      	lsls	r3, r3, #8
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f023 0320 	bic.w	r3, r3, #32
 8005676:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a28      	ldr	r2, [pc, #160]	; (8005728 <TIM_OC2_SetConfig+0x100>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d003      	beq.n	8005694 <TIM_OC2_SetConfig+0x6c>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a27      	ldr	r2, [pc, #156]	; (800572c <TIM_OC2_SetConfig+0x104>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d10d      	bne.n	80056b0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800569a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a1d      	ldr	r2, [pc, #116]	; (8005728 <TIM_OC2_SetConfig+0x100>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00f      	beq.n	80056d8 <TIM_OC2_SetConfig+0xb0>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a1c      	ldr	r2, [pc, #112]	; (800572c <TIM_OC2_SetConfig+0x104>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00b      	beq.n	80056d8 <TIM_OC2_SetConfig+0xb0>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a1b      	ldr	r2, [pc, #108]	; (8005730 <TIM_OC2_SetConfig+0x108>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d007      	beq.n	80056d8 <TIM_OC2_SetConfig+0xb0>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a1a      	ldr	r2, [pc, #104]	; (8005734 <TIM_OC2_SetConfig+0x10c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d003      	beq.n	80056d8 <TIM_OC2_SetConfig+0xb0>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a19      	ldr	r2, [pc, #100]	; (8005738 <TIM_OC2_SetConfig+0x110>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d113      	bne.n	8005700 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	621a      	str	r2, [r3, #32]
}
 800571a:	bf00      	nop
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40012c00 	.word	0x40012c00
 800572c:	40013400 	.word	0x40013400
 8005730:	40014000 	.word	0x40014000
 8005734:	40014400 	.word	0x40014400
 8005738:	40014800 	.word	0x40014800

0800573c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0303 	bic.w	r3, r3, #3
 8005776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	021b      	lsls	r3, r3, #8
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	4313      	orrs	r3, r2
 8005794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a27      	ldr	r2, [pc, #156]	; (8005838 <TIM_OC3_SetConfig+0xfc>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d003      	beq.n	80057a6 <TIM_OC3_SetConfig+0x6a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a26      	ldr	r2, [pc, #152]	; (800583c <TIM_OC3_SetConfig+0x100>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d10d      	bne.n	80057c2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	021b      	lsls	r3, r3, #8
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a1c      	ldr	r2, [pc, #112]	; (8005838 <TIM_OC3_SetConfig+0xfc>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00f      	beq.n	80057ea <TIM_OC3_SetConfig+0xae>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a1b      	ldr	r2, [pc, #108]	; (800583c <TIM_OC3_SetConfig+0x100>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d00b      	beq.n	80057ea <TIM_OC3_SetConfig+0xae>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a1a      	ldr	r2, [pc, #104]	; (8005840 <TIM_OC3_SetConfig+0x104>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d007      	beq.n	80057ea <TIM_OC3_SetConfig+0xae>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a19      	ldr	r2, [pc, #100]	; (8005844 <TIM_OC3_SetConfig+0x108>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d003      	beq.n	80057ea <TIM_OC3_SetConfig+0xae>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a18      	ldr	r2, [pc, #96]	; (8005848 <TIM_OC3_SetConfig+0x10c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d113      	bne.n	8005812 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	621a      	str	r2, [r3, #32]
}
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	40012c00 	.word	0x40012c00
 800583c:	40013400 	.word	0x40013400
 8005840:	40014000 	.word	0x40014000
 8005844:	40014400 	.word	0x40014400
 8005848:	40014800 	.word	0x40014800

0800584c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800587a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800587e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	021b      	lsls	r3, r3, #8
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800589a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	031b      	lsls	r3, r3, #12
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a18      	ldr	r2, [pc, #96]	; (800590c <TIM_OC4_SetConfig+0xc0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d00f      	beq.n	80058d0 <TIM_OC4_SetConfig+0x84>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a17      	ldr	r2, [pc, #92]	; (8005910 <TIM_OC4_SetConfig+0xc4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00b      	beq.n	80058d0 <TIM_OC4_SetConfig+0x84>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a16      	ldr	r2, [pc, #88]	; (8005914 <TIM_OC4_SetConfig+0xc8>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d007      	beq.n	80058d0 <TIM_OC4_SetConfig+0x84>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a15      	ldr	r2, [pc, #84]	; (8005918 <TIM_OC4_SetConfig+0xcc>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_OC4_SetConfig+0x84>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a14      	ldr	r2, [pc, #80]	; (800591c <TIM_OC4_SetConfig+0xd0>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d109      	bne.n	80058e4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	019b      	lsls	r3, r3, #6
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	621a      	str	r2, [r3, #32]
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40012c00 	.word	0x40012c00
 8005910:	40013400 	.word	0x40013400
 8005914:	40014000 	.word	0x40014000
 8005918:	40014400 	.word	0x40014400
 800591c:	40014800 	.word	0x40014800

08005920 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005964:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	041b      	lsls	r3, r3, #16
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a17      	ldr	r2, [pc, #92]	; (80059d4 <TIM_OC5_SetConfig+0xb4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00f      	beq.n	800599a <TIM_OC5_SetConfig+0x7a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a16      	ldr	r2, [pc, #88]	; (80059d8 <TIM_OC5_SetConfig+0xb8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00b      	beq.n	800599a <TIM_OC5_SetConfig+0x7a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a15      	ldr	r2, [pc, #84]	; (80059dc <TIM_OC5_SetConfig+0xbc>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d007      	beq.n	800599a <TIM_OC5_SetConfig+0x7a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a14      	ldr	r2, [pc, #80]	; (80059e0 <TIM_OC5_SetConfig+0xc0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d003      	beq.n	800599a <TIM_OC5_SetConfig+0x7a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a13      	ldr	r2, [pc, #76]	; (80059e4 <TIM_OC5_SetConfig+0xc4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d109      	bne.n	80059ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	021b      	lsls	r3, r3, #8
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	621a      	str	r2, [r3, #32]
}
 80059c8:	bf00      	nop
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	40012c00 	.word	0x40012c00
 80059d8:	40013400 	.word	0x40013400
 80059dc:	40014000 	.word	0x40014000
 80059e0:	40014400 	.word	0x40014400
 80059e4:	40014800 	.word	0x40014800

080059e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	051b      	lsls	r3, r3, #20
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a18      	ldr	r2, [pc, #96]	; (8005aa0 <TIM_OC6_SetConfig+0xb8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00f      	beq.n	8005a64 <TIM_OC6_SetConfig+0x7c>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a17      	ldr	r2, [pc, #92]	; (8005aa4 <TIM_OC6_SetConfig+0xbc>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00b      	beq.n	8005a64 <TIM_OC6_SetConfig+0x7c>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a16      	ldr	r2, [pc, #88]	; (8005aa8 <TIM_OC6_SetConfig+0xc0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d007      	beq.n	8005a64 <TIM_OC6_SetConfig+0x7c>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a15      	ldr	r2, [pc, #84]	; (8005aac <TIM_OC6_SetConfig+0xc4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d003      	beq.n	8005a64 <TIM_OC6_SetConfig+0x7c>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a14      	ldr	r2, [pc, #80]	; (8005ab0 <TIM_OC6_SetConfig+0xc8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d109      	bne.n	8005a78 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	029b      	lsls	r3, r3, #10
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	621a      	str	r2, [r3, #32]
}
 8005a92:	bf00      	nop
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40012c00 	.word	0x40012c00
 8005aa4:	40013400 	.word	0x40013400
 8005aa8:	40014000 	.word	0x40014000
 8005aac:	40014400 	.word	0x40014400
 8005ab0:	40014800 	.word	0x40014800

08005ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	f023 0201 	bic.w	r2, r3, #1
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f023 030a 	bic.w	r3, r3, #10
 8005af0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b087      	sub	sp, #28
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	60f8      	str	r0, [r7, #12]
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f023 0210 	bic.w	r2, r3, #16
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	031b      	lsls	r3, r3, #12
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	011b      	lsls	r3, r3, #4
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	621a      	str	r2, [r3, #32]
}
 8005b66:	bf00      	nop
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b085      	sub	sp, #20
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f043 0307 	orr.w	r3, r3, #7
 8005b94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	609a      	str	r2, [r3, #8]
}
 8005b9c:	bf00      	nop
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	021a      	lsls	r2, r3, #8
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	609a      	str	r2, [r3, #8]
}
 8005bdc:	bf00      	nop
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 031f 	and.w	r3, r3, #31
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a1a      	ldr	r2, [r3, #32]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	43db      	mvns	r3, r3
 8005c0a:	401a      	ands	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a1a      	ldr	r2, [r3, #32]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f003 031f 	and.w	r3, r3, #31
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c20:	431a      	orrs	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	621a      	str	r2, [r3, #32]
}
 8005c26:	bf00      	nop
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
	...

08005c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e068      	b.n	8005d1e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a2e      	ldr	r2, [pc, #184]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d004      	beq.n	8005c80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a2d      	ldr	r2, [pc, #180]	; (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d108      	bne.n	8005c92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a1e      	ldr	r2, [pc, #120]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d01d      	beq.n	8005cf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cbe:	d018      	beq.n	8005cf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a1b      	ldr	r2, [pc, #108]	; (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a1a      	ldr	r2, [pc, #104]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00e      	beq.n	8005cf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a18      	ldr	r2, [pc, #96]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d009      	beq.n	8005cf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a13      	ldr	r2, [pc, #76]	; (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d004      	beq.n	8005cf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a14      	ldr	r2, [pc, #80]	; (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d10c      	bne.n	8005d0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	40013400 	.word	0x40013400
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40000800 	.word	0x40000800
 8005d3c:	40000c00 	.word	0x40000c00
 8005d40:	40014000 	.word	0x40014000

08005d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e040      	b.n	8005e14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fb f972 	bl	800108c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2224      	movs	r2, #36	; 0x24
 8005dac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0201 	bic.w	r2, r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f82c 	bl	8005e1c <UART_SetConfig>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d101      	bne.n	8005dce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e022      	b.n	8005e14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 faaa 	bl	8006330 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fb31 	bl	8006474 <UART_CheckIdleState>
 8005e12:	4603      	mov	r3, r0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e1c:	b5b0      	push	{r4, r5, r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	4bad      	ldr	r3, [pc, #692]	; (80060fc <UART_SetConfig+0x2e0>)
 8005e48:	4013      	ands	r3, r2
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6812      	ldr	r2, [r2, #0]
 8005e4e:	69f9      	ldr	r1, [r7, #28]
 8005e50:	430b      	orrs	r3, r1
 8005e52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4aa2      	ldr	r2, [pc, #648]	; (8006100 <UART_SetConfig+0x2e4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d004      	beq.n	8005e84 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a99      	ldr	r2, [pc, #612]	; (8006104 <UART_SetConfig+0x2e8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d121      	bne.n	8005ee6 <UART_SetConfig+0xca>
 8005ea2:	4b99      	ldr	r3, [pc, #612]	; (8006108 <UART_SetConfig+0x2ec>)
 8005ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea8:	f003 0303 	and.w	r3, r3, #3
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d817      	bhi.n	8005ee0 <UART_SetConfig+0xc4>
 8005eb0:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <UART_SetConfig+0x9c>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005ec9 	.word	0x08005ec9
 8005ebc:	08005ed5 	.word	0x08005ed5
 8005ec0:	08005ecf 	.word	0x08005ecf
 8005ec4:	08005edb 	.word	0x08005edb
 8005ec8:	2301      	movs	r3, #1
 8005eca:	76fb      	strb	r3, [r7, #27]
 8005ecc:	e0e7      	b.n	800609e <UART_SetConfig+0x282>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	76fb      	strb	r3, [r7, #27]
 8005ed2:	e0e4      	b.n	800609e <UART_SetConfig+0x282>
 8005ed4:	2304      	movs	r3, #4
 8005ed6:	76fb      	strb	r3, [r7, #27]
 8005ed8:	e0e1      	b.n	800609e <UART_SetConfig+0x282>
 8005eda:	2308      	movs	r3, #8
 8005edc:	76fb      	strb	r3, [r7, #27]
 8005ede:	e0de      	b.n	800609e <UART_SetConfig+0x282>
 8005ee0:	2310      	movs	r3, #16
 8005ee2:	76fb      	strb	r3, [r7, #27]
 8005ee4:	e0db      	b.n	800609e <UART_SetConfig+0x282>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a88      	ldr	r2, [pc, #544]	; (800610c <UART_SetConfig+0x2f0>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d132      	bne.n	8005f56 <UART_SetConfig+0x13a>
 8005ef0:	4b85      	ldr	r3, [pc, #532]	; (8006108 <UART_SetConfig+0x2ec>)
 8005ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef6:	f003 030c 	and.w	r3, r3, #12
 8005efa:	2b0c      	cmp	r3, #12
 8005efc:	d828      	bhi.n	8005f50 <UART_SetConfig+0x134>
 8005efe:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <UART_SetConfig+0xe8>)
 8005f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f04:	08005f39 	.word	0x08005f39
 8005f08:	08005f51 	.word	0x08005f51
 8005f0c:	08005f51 	.word	0x08005f51
 8005f10:	08005f51 	.word	0x08005f51
 8005f14:	08005f45 	.word	0x08005f45
 8005f18:	08005f51 	.word	0x08005f51
 8005f1c:	08005f51 	.word	0x08005f51
 8005f20:	08005f51 	.word	0x08005f51
 8005f24:	08005f3f 	.word	0x08005f3f
 8005f28:	08005f51 	.word	0x08005f51
 8005f2c:	08005f51 	.word	0x08005f51
 8005f30:	08005f51 	.word	0x08005f51
 8005f34:	08005f4b 	.word	0x08005f4b
 8005f38:	2300      	movs	r3, #0
 8005f3a:	76fb      	strb	r3, [r7, #27]
 8005f3c:	e0af      	b.n	800609e <UART_SetConfig+0x282>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	76fb      	strb	r3, [r7, #27]
 8005f42:	e0ac      	b.n	800609e <UART_SetConfig+0x282>
 8005f44:	2304      	movs	r3, #4
 8005f46:	76fb      	strb	r3, [r7, #27]
 8005f48:	e0a9      	b.n	800609e <UART_SetConfig+0x282>
 8005f4a:	2308      	movs	r3, #8
 8005f4c:	76fb      	strb	r3, [r7, #27]
 8005f4e:	e0a6      	b.n	800609e <UART_SetConfig+0x282>
 8005f50:	2310      	movs	r3, #16
 8005f52:	76fb      	strb	r3, [r7, #27]
 8005f54:	e0a3      	b.n	800609e <UART_SetConfig+0x282>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a6d      	ldr	r2, [pc, #436]	; (8006110 <UART_SetConfig+0x2f4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d120      	bne.n	8005fa2 <UART_SetConfig+0x186>
 8005f60:	4b69      	ldr	r3, [pc, #420]	; (8006108 <UART_SetConfig+0x2ec>)
 8005f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f6a:	2b30      	cmp	r3, #48	; 0x30
 8005f6c:	d013      	beq.n	8005f96 <UART_SetConfig+0x17a>
 8005f6e:	2b30      	cmp	r3, #48	; 0x30
 8005f70:	d814      	bhi.n	8005f9c <UART_SetConfig+0x180>
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	d009      	beq.n	8005f8a <UART_SetConfig+0x16e>
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d810      	bhi.n	8005f9c <UART_SetConfig+0x180>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <UART_SetConfig+0x168>
 8005f7e:	2b10      	cmp	r3, #16
 8005f80:	d006      	beq.n	8005f90 <UART_SetConfig+0x174>
 8005f82:	e00b      	b.n	8005f9c <UART_SetConfig+0x180>
 8005f84:	2300      	movs	r3, #0
 8005f86:	76fb      	strb	r3, [r7, #27]
 8005f88:	e089      	b.n	800609e <UART_SetConfig+0x282>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	76fb      	strb	r3, [r7, #27]
 8005f8e:	e086      	b.n	800609e <UART_SetConfig+0x282>
 8005f90:	2304      	movs	r3, #4
 8005f92:	76fb      	strb	r3, [r7, #27]
 8005f94:	e083      	b.n	800609e <UART_SetConfig+0x282>
 8005f96:	2308      	movs	r3, #8
 8005f98:	76fb      	strb	r3, [r7, #27]
 8005f9a:	e080      	b.n	800609e <UART_SetConfig+0x282>
 8005f9c:	2310      	movs	r3, #16
 8005f9e:	76fb      	strb	r3, [r7, #27]
 8005fa0:	e07d      	b.n	800609e <UART_SetConfig+0x282>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a5b      	ldr	r2, [pc, #364]	; (8006114 <UART_SetConfig+0x2f8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d120      	bne.n	8005fee <UART_SetConfig+0x1d2>
 8005fac:	4b56      	ldr	r3, [pc, #344]	; (8006108 <UART_SetConfig+0x2ec>)
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005fb6:	2bc0      	cmp	r3, #192	; 0xc0
 8005fb8:	d013      	beq.n	8005fe2 <UART_SetConfig+0x1c6>
 8005fba:	2bc0      	cmp	r3, #192	; 0xc0
 8005fbc:	d814      	bhi.n	8005fe8 <UART_SetConfig+0x1cc>
 8005fbe:	2b80      	cmp	r3, #128	; 0x80
 8005fc0:	d009      	beq.n	8005fd6 <UART_SetConfig+0x1ba>
 8005fc2:	2b80      	cmp	r3, #128	; 0x80
 8005fc4:	d810      	bhi.n	8005fe8 <UART_SetConfig+0x1cc>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <UART_SetConfig+0x1b4>
 8005fca:	2b40      	cmp	r3, #64	; 0x40
 8005fcc:	d006      	beq.n	8005fdc <UART_SetConfig+0x1c0>
 8005fce:	e00b      	b.n	8005fe8 <UART_SetConfig+0x1cc>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	76fb      	strb	r3, [r7, #27]
 8005fd4:	e063      	b.n	800609e <UART_SetConfig+0x282>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	76fb      	strb	r3, [r7, #27]
 8005fda:	e060      	b.n	800609e <UART_SetConfig+0x282>
 8005fdc:	2304      	movs	r3, #4
 8005fde:	76fb      	strb	r3, [r7, #27]
 8005fe0:	e05d      	b.n	800609e <UART_SetConfig+0x282>
 8005fe2:	2308      	movs	r3, #8
 8005fe4:	76fb      	strb	r3, [r7, #27]
 8005fe6:	e05a      	b.n	800609e <UART_SetConfig+0x282>
 8005fe8:	2310      	movs	r3, #16
 8005fea:	76fb      	strb	r3, [r7, #27]
 8005fec:	e057      	b.n	800609e <UART_SetConfig+0x282>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a49      	ldr	r2, [pc, #292]	; (8006118 <UART_SetConfig+0x2fc>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d125      	bne.n	8006044 <UART_SetConfig+0x228>
 8005ff8:	4b43      	ldr	r3, [pc, #268]	; (8006108 <UART_SetConfig+0x2ec>)
 8005ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006006:	d017      	beq.n	8006038 <UART_SetConfig+0x21c>
 8006008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800600c:	d817      	bhi.n	800603e <UART_SetConfig+0x222>
 800600e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006012:	d00b      	beq.n	800602c <UART_SetConfig+0x210>
 8006014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006018:	d811      	bhi.n	800603e <UART_SetConfig+0x222>
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <UART_SetConfig+0x20a>
 800601e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006022:	d006      	beq.n	8006032 <UART_SetConfig+0x216>
 8006024:	e00b      	b.n	800603e <UART_SetConfig+0x222>
 8006026:	2300      	movs	r3, #0
 8006028:	76fb      	strb	r3, [r7, #27]
 800602a:	e038      	b.n	800609e <UART_SetConfig+0x282>
 800602c:	2302      	movs	r3, #2
 800602e:	76fb      	strb	r3, [r7, #27]
 8006030:	e035      	b.n	800609e <UART_SetConfig+0x282>
 8006032:	2304      	movs	r3, #4
 8006034:	76fb      	strb	r3, [r7, #27]
 8006036:	e032      	b.n	800609e <UART_SetConfig+0x282>
 8006038:	2308      	movs	r3, #8
 800603a:	76fb      	strb	r3, [r7, #27]
 800603c:	e02f      	b.n	800609e <UART_SetConfig+0x282>
 800603e:	2310      	movs	r3, #16
 8006040:	76fb      	strb	r3, [r7, #27]
 8006042:	e02c      	b.n	800609e <UART_SetConfig+0x282>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a2d      	ldr	r2, [pc, #180]	; (8006100 <UART_SetConfig+0x2e4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d125      	bne.n	800609a <UART_SetConfig+0x27e>
 800604e:	4b2e      	ldr	r3, [pc, #184]	; (8006108 <UART_SetConfig+0x2ec>)
 8006050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006054:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006058:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800605c:	d017      	beq.n	800608e <UART_SetConfig+0x272>
 800605e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006062:	d817      	bhi.n	8006094 <UART_SetConfig+0x278>
 8006064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006068:	d00b      	beq.n	8006082 <UART_SetConfig+0x266>
 800606a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800606e:	d811      	bhi.n	8006094 <UART_SetConfig+0x278>
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <UART_SetConfig+0x260>
 8006074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006078:	d006      	beq.n	8006088 <UART_SetConfig+0x26c>
 800607a:	e00b      	b.n	8006094 <UART_SetConfig+0x278>
 800607c:	2300      	movs	r3, #0
 800607e:	76fb      	strb	r3, [r7, #27]
 8006080:	e00d      	b.n	800609e <UART_SetConfig+0x282>
 8006082:	2302      	movs	r3, #2
 8006084:	76fb      	strb	r3, [r7, #27]
 8006086:	e00a      	b.n	800609e <UART_SetConfig+0x282>
 8006088:	2304      	movs	r3, #4
 800608a:	76fb      	strb	r3, [r7, #27]
 800608c:	e007      	b.n	800609e <UART_SetConfig+0x282>
 800608e:	2308      	movs	r3, #8
 8006090:	76fb      	strb	r3, [r7, #27]
 8006092:	e004      	b.n	800609e <UART_SetConfig+0x282>
 8006094:	2310      	movs	r3, #16
 8006096:	76fb      	strb	r3, [r7, #27]
 8006098:	e001      	b.n	800609e <UART_SetConfig+0x282>
 800609a:	2310      	movs	r3, #16
 800609c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a17      	ldr	r2, [pc, #92]	; (8006100 <UART_SetConfig+0x2e4>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	f040 8087 	bne.w	80061b8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060aa:	7efb      	ldrb	r3, [r7, #27]
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	d837      	bhi.n	8006120 <UART_SetConfig+0x304>
 80060b0:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <UART_SetConfig+0x29c>)
 80060b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b6:	bf00      	nop
 80060b8:	080060dd 	.word	0x080060dd
 80060bc:	08006121 	.word	0x08006121
 80060c0:	080060e5 	.word	0x080060e5
 80060c4:	08006121 	.word	0x08006121
 80060c8:	080060eb 	.word	0x080060eb
 80060cc:	08006121 	.word	0x08006121
 80060d0:	08006121 	.word	0x08006121
 80060d4:	08006121 	.word	0x08006121
 80060d8:	080060f3 	.word	0x080060f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060dc:	f7fd fa2e 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 80060e0:	6178      	str	r0, [r7, #20]
        break;
 80060e2:	e022      	b.n	800612a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060e4:	4b0d      	ldr	r3, [pc, #52]	; (800611c <UART_SetConfig+0x300>)
 80060e6:	617b      	str	r3, [r7, #20]
        break;
 80060e8:	e01f      	b.n	800612a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ea:	f7fd f98f 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80060ee:	6178      	str	r0, [r7, #20]
        break;
 80060f0:	e01b      	b.n	800612a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060f6:	617b      	str	r3, [r7, #20]
        break;
 80060f8:	e017      	b.n	800612a <UART_SetConfig+0x30e>
 80060fa:	bf00      	nop
 80060fc:	efff69f3 	.word	0xefff69f3
 8006100:	40008000 	.word	0x40008000
 8006104:	40013800 	.word	0x40013800
 8006108:	40021000 	.word	0x40021000
 800610c:	40004400 	.word	0x40004400
 8006110:	40004800 	.word	0x40004800
 8006114:	40004c00 	.word	0x40004c00
 8006118:	40005000 	.word	0x40005000
 800611c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	76bb      	strb	r3, [r7, #26]
        break;
 8006128:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 80f1 	beq.w	8006314 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	4613      	mov	r3, r2
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	4413      	add	r3, r2
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	429a      	cmp	r2, r3
 8006140:	d305      	bcc.n	800614e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	429a      	cmp	r2, r3
 800614c:	d902      	bls.n	8006154 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	76bb      	strb	r3, [r7, #26]
 8006152:	e0df      	b.n	8006314 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	4618      	mov	r0, r3
 8006158:	f04f 0100 	mov.w	r1, #0
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	020b      	lsls	r3, r1, #8
 8006166:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800616a:	0202      	lsls	r2, r0, #8
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	6849      	ldr	r1, [r1, #4]
 8006170:	0849      	lsrs	r1, r1, #1
 8006172:	4608      	mov	r0, r1
 8006174:	f04f 0100 	mov.w	r1, #0
 8006178:	1814      	adds	r4, r2, r0
 800617a:	eb43 0501 	adc.w	r5, r3, r1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	461a      	mov	r2, r3
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	4620      	mov	r0, r4
 800618a:	4629      	mov	r1, r5
 800618c:	f7fa f81c 	bl	80001c8 <__aeabi_uldivmod>
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4613      	mov	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800619e:	d308      	bcc.n	80061b2 <UART_SetConfig+0x396>
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061a6:	d204      	bcs.n	80061b2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	60da      	str	r2, [r3, #12]
 80061b0:	e0b0      	b.n	8006314 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	76bb      	strb	r3, [r7, #26]
 80061b6:	e0ad      	b.n	8006314 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061c0:	d15c      	bne.n	800627c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80061c2:	7efb      	ldrb	r3, [r7, #27]
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d828      	bhi.n	800621a <UART_SetConfig+0x3fe>
 80061c8:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <UART_SetConfig+0x3b4>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	080061f5 	.word	0x080061f5
 80061d4:	080061fd 	.word	0x080061fd
 80061d8:	08006205 	.word	0x08006205
 80061dc:	0800621b 	.word	0x0800621b
 80061e0:	0800620b 	.word	0x0800620b
 80061e4:	0800621b 	.word	0x0800621b
 80061e8:	0800621b 	.word	0x0800621b
 80061ec:	0800621b 	.word	0x0800621b
 80061f0:	08006213 	.word	0x08006213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061f4:	f7fd f9a2 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 80061f8:	6178      	str	r0, [r7, #20]
        break;
 80061fa:	e013      	b.n	8006224 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061fc:	f7fd f9b4 	bl	8003568 <HAL_RCC_GetPCLK2Freq>
 8006200:	6178      	str	r0, [r7, #20]
        break;
 8006202:	e00f      	b.n	8006224 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006204:	4b49      	ldr	r3, [pc, #292]	; (800632c <UART_SetConfig+0x510>)
 8006206:	617b      	str	r3, [r7, #20]
        break;
 8006208:	e00c      	b.n	8006224 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800620a:	f7fd f8ff 	bl	800340c <HAL_RCC_GetSysClockFreq>
 800620e:	6178      	str	r0, [r7, #20]
        break;
 8006210:	e008      	b.n	8006224 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006216:	617b      	str	r3, [r7, #20]
        break;
 8006218:	e004      	b.n	8006224 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	76bb      	strb	r3, [r7, #26]
        break;
 8006222:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d074      	beq.n	8006314 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	005a      	lsls	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	085b      	lsrs	r3, r3, #1
 8006234:	441a      	add	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	fbb2 f3f3 	udiv	r3, r2, r3
 800623e:	b29b      	uxth	r3, r3
 8006240:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	2b0f      	cmp	r3, #15
 8006246:	d916      	bls.n	8006276 <UART_SetConfig+0x45a>
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800624e:	d212      	bcs.n	8006276 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	b29b      	uxth	r3, r3
 8006254:	f023 030f 	bic.w	r3, r3, #15
 8006258:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	085b      	lsrs	r3, r3, #1
 800625e:	b29b      	uxth	r3, r3
 8006260:	f003 0307 	and.w	r3, r3, #7
 8006264:	b29a      	uxth	r2, r3
 8006266:	89fb      	ldrh	r3, [r7, #14]
 8006268:	4313      	orrs	r3, r2
 800626a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	89fa      	ldrh	r2, [r7, #14]
 8006272:	60da      	str	r2, [r3, #12]
 8006274:	e04e      	b.n	8006314 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	76bb      	strb	r3, [r7, #26]
 800627a:	e04b      	b.n	8006314 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800627c:	7efb      	ldrb	r3, [r7, #27]
 800627e:	2b08      	cmp	r3, #8
 8006280:	d827      	bhi.n	80062d2 <UART_SetConfig+0x4b6>
 8006282:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <UART_SetConfig+0x46c>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	080062ad 	.word	0x080062ad
 800628c:	080062b5 	.word	0x080062b5
 8006290:	080062bd 	.word	0x080062bd
 8006294:	080062d3 	.word	0x080062d3
 8006298:	080062c3 	.word	0x080062c3
 800629c:	080062d3 	.word	0x080062d3
 80062a0:	080062d3 	.word	0x080062d3
 80062a4:	080062d3 	.word	0x080062d3
 80062a8:	080062cb 	.word	0x080062cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062ac:	f7fd f946 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 80062b0:	6178      	str	r0, [r7, #20]
        break;
 80062b2:	e013      	b.n	80062dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062b4:	f7fd f958 	bl	8003568 <HAL_RCC_GetPCLK2Freq>
 80062b8:	6178      	str	r0, [r7, #20]
        break;
 80062ba:	e00f      	b.n	80062dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062bc:	4b1b      	ldr	r3, [pc, #108]	; (800632c <UART_SetConfig+0x510>)
 80062be:	617b      	str	r3, [r7, #20]
        break;
 80062c0:	e00c      	b.n	80062dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062c2:	f7fd f8a3 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80062c6:	6178      	str	r0, [r7, #20]
        break;
 80062c8:	e008      	b.n	80062dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ce:	617b      	str	r3, [r7, #20]
        break;
 80062d0:	e004      	b.n	80062dc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	76bb      	strb	r3, [r7, #26]
        break;
 80062da:	bf00      	nop
    }

    if (pclk != 0U)
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d018      	beq.n	8006314 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	085a      	lsrs	r2, r3, #1
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	441a      	add	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	2b0f      	cmp	r3, #15
 80062fc:	d908      	bls.n	8006310 <UART_SetConfig+0x4f4>
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006304:	d204      	bcs.n	8006310 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	60da      	str	r2, [r3, #12]
 800630e:	e001      	b.n	8006314 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006320:	7ebb      	ldrb	r3, [r7, #26]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3720      	adds	r7, #32
 8006326:	46bd      	mov	sp, r7
 8006328:	bdb0      	pop	{r4, r5, r7, pc}
 800632a:	bf00      	nop
 800632c:	00f42400 	.word	0x00f42400

08006330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	f003 0308 	and.w	r3, r3, #8
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	f003 0310 	and.w	r3, r3, #16
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640c:	2b00      	cmp	r3, #0
 800640e:	d01a      	beq.n	8006446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800642e:	d10a      	bne.n	8006446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	605a      	str	r2, [r3, #4]
  }
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af02      	add	r7, sp, #8
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006484:	f7fa feba 	bl	80011fc <HAL_GetTick>
 8006488:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0308 	and.w	r3, r3, #8
 8006494:	2b08      	cmp	r3, #8
 8006496:	d10e      	bne.n	80064b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f82d 	bl	8006506 <UART_WaitOnFlagUntilTimeout>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e023      	b.n	80064fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0304 	and.w	r3, r3, #4
 80064c0:	2b04      	cmp	r3, #4
 80064c2:	d10e      	bne.n	80064e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f817 	bl	8006506 <UART_WaitOnFlagUntilTimeout>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e00d      	b.n	80064fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2220      	movs	r2, #32
 80064ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b084      	sub	sp, #16
 800650a:	af00      	add	r7, sp, #0
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	603b      	str	r3, [r7, #0]
 8006512:	4613      	mov	r3, r2
 8006514:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006516:	e05e      	b.n	80065d6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651e:	d05a      	beq.n	80065d6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006520:	f7fa fe6c 	bl	80011fc <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	429a      	cmp	r2, r3
 800652e:	d302      	bcc.n	8006536 <UART_WaitOnFlagUntilTimeout+0x30>
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d11b      	bne.n	800656e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006544:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0201 	bic.w	r2, r2, #1
 8006554:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2220      	movs	r2, #32
 800655a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2220      	movs	r2, #32
 8006560:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e043      	b.n	80065f6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b00      	cmp	r3, #0
 800657a:	d02c      	beq.n	80065d6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800658a:	d124      	bne.n	80065d6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006594:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065a4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0201 	bic.w	r2, r2, #1
 80065b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2220      	movs	r2, #32
 80065ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2220      	movs	r2, #32
 80065c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e00f      	b.n	80065f6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69da      	ldr	r2, [r3, #28]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4013      	ands	r3, r2
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	bf0c      	ite	eq
 80065e6:	2301      	moveq	r3, #1
 80065e8:	2300      	movne	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	79fb      	ldrb	r3, [r7, #7]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d091      	beq.n	8006518 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <__libc_init_array>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	4d0d      	ldr	r5, [pc, #52]	; (8006638 <__libc_init_array+0x38>)
 8006604:	4c0d      	ldr	r4, [pc, #52]	; (800663c <__libc_init_array+0x3c>)
 8006606:	1b64      	subs	r4, r4, r5
 8006608:	10a4      	asrs	r4, r4, #2
 800660a:	2600      	movs	r6, #0
 800660c:	42a6      	cmp	r6, r4
 800660e:	d109      	bne.n	8006624 <__libc_init_array+0x24>
 8006610:	4d0b      	ldr	r5, [pc, #44]	; (8006640 <__libc_init_array+0x40>)
 8006612:	4c0c      	ldr	r4, [pc, #48]	; (8006644 <__libc_init_array+0x44>)
 8006614:	f000 f820 	bl	8006658 <_init>
 8006618:	1b64      	subs	r4, r4, r5
 800661a:	10a4      	asrs	r4, r4, #2
 800661c:	2600      	movs	r6, #0
 800661e:	42a6      	cmp	r6, r4
 8006620:	d105      	bne.n	800662e <__libc_init_array+0x2e>
 8006622:	bd70      	pop	{r4, r5, r6, pc}
 8006624:	f855 3b04 	ldr.w	r3, [r5], #4
 8006628:	4798      	blx	r3
 800662a:	3601      	adds	r6, #1
 800662c:	e7ee      	b.n	800660c <__libc_init_array+0xc>
 800662e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006632:	4798      	blx	r3
 8006634:	3601      	adds	r6, #1
 8006636:	e7f2      	b.n	800661e <__libc_init_array+0x1e>
 8006638:	080066d0 	.word	0x080066d0
 800663c:	080066d0 	.word	0x080066d0
 8006640:	080066d0 	.word	0x080066d0
 8006644:	080066d4 	.word	0x080066d4

08006648 <memset>:
 8006648:	4402      	add	r2, r0
 800664a:	4603      	mov	r3, r0
 800664c:	4293      	cmp	r3, r2
 800664e:	d100      	bne.n	8006652 <memset+0xa>
 8006650:	4770      	bx	lr
 8006652:	f803 1b01 	strb.w	r1, [r3], #1
 8006656:	e7f9      	b.n	800664c <memset+0x4>

08006658 <_init>:
 8006658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665a:	bf00      	nop
 800665c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665e:	bc08      	pop	{r3}
 8006660:	469e      	mov	lr, r3
 8006662:	4770      	bx	lr

08006664 <_fini>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	bf00      	nop
 8006668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666a:	bc08      	pop	{r3}
 800666c:	469e      	mov	lr, r3
 800666e:	4770      	bx	lr
